#!/usr/bin/env python
# python 2 only, adjust path (or port, I'd love you) as needed
# *not* /usr/bin/env python
# run @ --help for (a little) more information
"""
primarily a python eval command. auto-formats the result of your expression:
(> indicates the line contains user input)

  > $ @ '1'
    1
  > $ @ '1 + 1'
    2
  > $ @ '"hello world"'
    hello world

has auto-import; looks through your string for module names.
if it finds them, it imports them. shouldn't cause any issues if you don't
mean to use the module:

  > $ @ 'time.time()'
    1397224233.76

if you pass -p, prints x for x in <your expression> on lines:

  > $ @ '[1, 2, 3, 4]'
    [1, 2, 3, 4]
  > $ @ -p '[1, 2, 3, 4]'
    1
    2
    3
    4

if you pass -l, appends ' for line in lines' to your expression:

  > $ @ -pl 'line[::-1]'
  > hello world
    dlrow olleh
  > wheee!
    !eeehw
  > this is fun!
    !nuf si siht

examples from my bash history (try them, they don't bite):

    @ '"|".join(lines)'
    @ -p 'range(10)'
    @ -pl 'line[::-1]
    @ '"%s %s" % (datetime.datetime.now(), line)' -plu
    @ 'math.sqrt(49012)'
    @ 'math.sqrt(150)'
    ... | @ 'line.decode("utf-8").encode("unicode_escape")' -pl | ...
    @ 'x % 5 for x in range(15)'
    @ 'dir()' -p
    @ 'random.SystemRandom().choice("abcdef0123456789") for x in range(30)' -j
    @ 'pprint.pprint(json.loads(inp()))'
    @ 'urllib2.urlopen("google.com").read()'
"""


from __future__ import print_function

import os
import sys
import codecs
import ast
import token
import tokenize

class _Unbuffered(object):
    def __init__(self, stream):
        self.stream = stream
        self._unbuffered = True

    def write(self, data):
        if type(data) == unicode:
            data = data.encode("utf-8")
        self.stream.write(data)
        if self._unbuffered:
            self.stream.flush()

    def __getattr__(self, attr):
        return getattr(self.stream, attr)

sys.stdout = _Unbuffered(sys.stdout)
sys.stdout._unbuffered = sys.stdout.isatty()

sys.stderr = _Unbuffered(sys.stderr)
sys.stderr._unbuffered = sys.stderr.isatty()

def _update_globals():
    g = dict(globals())
    globals().update(os.environ)
    globals().update(g)

    overlap = set(g) & set(os.environ)
    if overlap:
        print("WARNING: variable overlap: %r" % overlap)
_update_globals()
del _update_globals

def succeed():
    sys.exit(0)

def fail():
    sys.exit(1)

def lines():
    yield None
    while True:
        line = sys.stdin.readline().decode("utf-8")
        if not line:
            break
        if line.endswith("\n"):
            line = line[:-1]
        yield line

def inp():
    return sys.stdin.read().decode("utf-8")

def _hash(hasher, text):
    instance = hasher()
    instance.update(text)
    return instance

def md5(text):
    import hashlib
    return _hash(hashlib.md5, text).hexdigest()
def sha256(text):
    import hashlib
    return _hash(hashlib.sha256, text).hexdigest()

lines = lines()
assert lines.next() is None

def bytes():
    yield None
    if sys.stdout.isatty() and sys.stdout._unbuffered:
        bufsize = 1
    else:
        bufsize = 512

    while True:
        s = sys.stdin.read(bufsize)
        if not s:
            break
        for char in s:
            yield char
bytes = bytes()
assert bytes.next() is None

def _split_statements(string):

    # _statements, _last_statement
    #s = "1; yield 1; 1 for in 1; \"hello; there\"; yay"

    operations = [[]]
    for type, tokenstring, start, end, line in tokenize.generate_tokens(iter(string.split("\n")).next):
        if tokenstring.strip() == ";":
            operations.append([])
            continue
        operations[-1].append((type, tokenstring))
    strings = [tokenize.untokenize(o) for o in operations]
    return strings[:-1], strings[-1]

    # eval(compile(ast.Module([ast.parse("print ast.parse(\"hello\"); 1 + 1").body[0]]), "string", "exec"))
    # eval(compile(ast.Expression(ast.parse("exec ast.parse(); 1 + 1").body[1].value), "string", "eval"))
    # _parsed_module = ast.parse(_string)
    # _codes = [
    #     ast.Module([x]) if type(x) != 
    # ]

def _parse_args():
    import argparse
    class Thingy(argparse.RawDescriptionHelpFormatter,
            argparse.ArgumentDefaultsHelpFormatter):
        # argparse's api is weird here
        pass
    parser = argparse.ArgumentParser(epilog=__doc__,
            description="Convenient python eval!",
            formatter_class=Thingy)
    parser.add_argument("-a", "--all", action="store_true",
            help="wrap expression in all()")
    parser.add_argument("-n", "--any", action="store_true",
            help="wrap expression in any()")
    parser.add_argument("-l", "--lines", action="store_true",
            help="make expression iterable per line")
    parser.add_argument("-c", "--chars", action="store_true",
            help="make expression iterable per character")
    parser.add_argument("-b", "--bool", action="store_true",
            help="wrap expression in bool() - important if result will be a bool!")
    parser.add_argument("-u", "--unbuffered", action="store_true",
            help="shut off output buffering")
    parser.add_argument("-p", "--print-each", action="store_true",
            help="print each result from the iterable - good with -l pipelining")
    parser.add_argument("-j", "--print-joined", action="store_true",
            help="print each result from the iterable, no newlines - good for -c pipelining")
    parser.add_argument("-f", "--filter", default=None,
            help="add a filter expression to the genexp")
    parser.add_argument("-F", "--postfilter", default=None,
            help="same as -f but run on result of expression, not input")
    parser.add_argument("-v", "--variables", nargs="*",
            help='use as -v x="hi" y="$there" to add variables to the expression')
    parser.add_argument("string", default=None, nargs="*",
            help="the expression, automatically joined by space if multiple specified")
    args = parser.parse_args()

    if args.unbuffered:
        sys.stdout._unbuffered = True
        sys.stderr._unbuffered = True

    string = " ".join(args.string) if args.string else None
    statements, string = _split_statements(string)
    if args.print_joined:
        args.print_each = True

    assert not (args.lines and args.chars), "only -c or -l please"
    actions = len([x for x in [
        args.all,
        args.any,
        args.bool,
        args.print_each
    ] if x])
    assert actions <= 1, (
            "only one of ---all, --any, --bool, or --print_each please")


    if args.lines:
        if string is None:
            string = "line"
        string = "(%s) for line in lines" % string
    if args.chars:
        if string is None:
            string = "char"
        string = "(%s) for char in characters" % string

    if args.filter:
        string += "%s if (%s)" % (string, args.filter)
    if args.postfilter:
        string = "_postfilter for _postfilter in (%s) if (%s)" % (string,
                args.postfilter)

    if args.all:
        string = "all(%s)" % string
    if args.any:
        string = "any(%s)" % string
    if args.bool:
        string = "bool(%s)" % string

    if not args.variables:
        args.variables = []
    for var in args.variables:
        name, equals, value = var.partition("=")
        assert equals, "please put an equals sign in variable defitions"
        globals()[name] = value

    return (statements, string, args.print_each,
            sys.stdout.write if args.print_joined else print)
_statements, _string, _shouldprint, print = _parse_args()
del _parse_args

_optional_modules = [
    "subprocess",
    "platform",
    "re",
    "string",
    "struct",
    "unicodedata",
    "datetime",
    "pprint",
    "random",
    "math",
    "decimal",
    "fractions",
    "itertools",
    "functools",
    "operator",
    "json",
    "pickle",
    "glob",
    "fnmatch",
    "shutil",
    "sqlite3",
    "zlib",
    "gzip",
    "bz2",
    "zipfile",
    "tarfile",
    "csv",
    "hashlib",
    "time",
    "uu",
    "requests",
    "urllib2",
    "urllib",
    "uuid",
    "urlparse",
    "shlex",
    "tty",
    "termios",
    "grp",
    "pwd",
    "pty",
    "fcntl",
    "blessings",
    "collections",
    "chardet",
    "twisted",
    "tokenize",
    "token",
]
for _mod in _optional_modules:
    if any(_mod in _s for _s in _statements + [_string]):
        exec "import %s" % _mod

if "terminal" in _string:
    import blessings
    terminal = blessings.Terminal(force_styling=True)

del _mod
del _optional_modules

try:
    for _statement in _statements:
        exec _statement
    if not _string.strip():
        succeed()
    result = eval("(%s)" % _string)
except KeyboardInterrupt:
    sys.stderr.write("@ killed (ctrl+d to close cleanly)")
    fail()
except BaseException as e:
    import traceback
    x = traceback.format_exc().split("\n")
    y = "\n".join(x[4:])
    sys.stderr.write(y)
    sys.stderr.flush()
    fail()


if result is None:
    result = True

if not isinstance(result, basestring):
    try:
        iterator = iter(result)
    except TypeError:
        pass
    else:
        if _shouldprint:
            for x in iterator:
                print(x)
        else:
            result2 = list(iterator)
            if result2 == list(result): # check for repeatability
                print(result)
            elif any(x != None for x in result2):
                print(result2)
        succeed()

if not isinstance(result, bool) or _shouldprint:
    print(result)

if isinstance(result, bool):
    if result:
        succeed()
    else:
        fail()

succeed()
