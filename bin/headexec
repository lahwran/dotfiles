#!/usr/bin/python
from __future__ import print_function
import errno
import subprocess
import signal
#import pudb; pudb.set_trace()
import sys
import time
import blessed
from blessed.sequences import SequenceTextWrapper
term = blessed.Terminal()
argv = sys.argv[1:]

cache = {}

def wrapline(line):
    return [_linewrap for _linewrap in SequenceTextWrapper(width=term.width, term=term, drop_whitespace=False, replace_whitespace=False).wrap(line)] if line.strip() else (u'',)
    

def memoized_wrapline(line, strip_end):
    lines = cache.get(line, None)
    if lines is None:
        lines = wrapline(line[:-1] if strip_end else line)
        cache[line] = lines
    return lines

def seq_splitlines(text_list, tail):
    result = 0
    first_unclear = None
    for idx, buf in enumerate(text_list):
        if buf[-1] != "\n":
            first_unclear = idx
            break
        result += len(memoized_wrapline(buf[:-1], True))
    if not first_unclear:
        return result, None, None
    joined = "".join(text_list[first_unclear:])
    joined += tail

    remaining = joined.split('\n')
    temp = [(s + "\n" if i < len(remaining) - 1 else s) for i, s in enumerate(remaining)]
    for buf in temp:
        result += len(memoized_wrapline(buf, True))
    result += len(wrapline(temp[-1]))
    return result, temp, first_unclear

def track_linecount(text_list, tail, thresh):
    result, temp, first_unclear = seq_splitlines(text_list, tail)
    if temp is not None and result < thresh:
        text_list[:] = text_list[:first_unclear] + temp
    return result < thresh

def get_linecount(text_list):
    return seq_splitlines(text_list, "")[0]


def chunks(seq, chunklen, enum=False):
    x = len(seq)
    q = chunklen
    g = ((a*q, (a+1)*q) for a in xrange((x+q-1)/q))
    if not enum:
        return [seq[start:end] for start,end in g]
    return [((start, end), seq[start:end]) for start,end in g]

def print_what_we_can(printed_so_far, print_queue):
    if len("".join(printed_so_far) + "".join(print_queue)) > 18496: import pudb; pudb.set_trace()
    if not print_queue:
        return
    printed = False
    try:
        maxidx = 0
        for fragidx, frag in enumerate(print_queue):
            if track_linecount(printed_so_far, frag, term.height):
                printed = True
                sys.stdout.write(frag)
                maxidx = fragidx+1
            else:
                break
        print_queue[:] = print_queue[maxidx:]
        if not print_queue:
            return

        for chunksize in [4096, 256, 64, 8, 1]:
            if not print_queue: break
            maxchunkidx = 0
            chunksize = 32
            for chunkrange, chunk in chunks(print_queue[0], chunksize, enum=True):
                begin, end = chunkrange
                if track_linecount(printed_so_far, chunk, term.height):
                    printed = True
                    sys.stdout.write(chunk)
                    maxidx = end
                else:
                    break
            print_queue[0] = print_queue[maxidx:]
            if not print_queue[0]:
                print_queue[:] = print_queue[1:]
    finally:
        if printed:
            sys.stdout.flush()

def execute(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # Poll process for new output until finished
    now = time.time()
    last = 0
    printed_so_far = []
    print_queue = []
    print(term.height)
    try:
        while process.poll() is None:
            if now - last > 0.1:
                size = 1
            else:
                size = min(size*2, 1024)

            last = time.time()
            content = process.stdout.read(size)
            now = time.time()
            print_queue.append(content)
            print_what_we_can(printed_so_far, print_queue)
            if print_queue:
                print("Printed line count:", get_linecount("".join(printed_so_far)))
                raise KeyboardInterrupt
        print_queue.append(process.stdout.read())
        print_what_we_can(printed_so_far, print_queue)
    except KeyboardInterrupt:
        try:
            process.send_signal(signal.SIGINT)
            for x in range(30):
                time.sleep(0.002)
                if process.poll(): return process.poll()
            process.terminate()
            for x in range(60):
                time.sleep(0.002)
                if process.poll(): return process.poll()
            process.kill()
            for x in range(100):
                time.sleep(0.01)
                if process.poll(): return process.poll()
        except OSError as e:
            if e.errno == errno.ESRCH:
                return process.poll()
            raise
        print("Process somehow still alive after kill... This shouldn't happen but is imaginable, your kernel may be fucked up or something")
    return process.poll()


sys.exit(execute(argv))
