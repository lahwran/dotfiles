#!/usr/bin/python
from __future__ import print_function
import subprocess
import signal
#import pudb; pudb.set_trace()
import sys
import time
import blessed
term = blessed.Terminal()
argv = sys.argv[1:]

def get_linecount(text_list):
    
    lines = term.wrap(string)
    return len(lines)


def chunks(seq, chunklen):
    g = ((a*q, (a+1)*q) for a in xrange((x+q-1)/q))
    return [seq[start:end] for start,end in g]

def print_what_we_can(printed_so_far, print_queue):
    if not print_queue:
        return
    printed = False
    try:
        maxidx = 0
        for fragidx, frag in enumerate(print_queue):
            if get_linecount("".join(printed_so_far + [frag])) < term.height:
                printed_so_far.append(frag)
                printed = True
                sys.stdout.write(frag)
                maxidx = fragidx+1
            else:
                break
        print_queue[:] = print_queue[maxidx:]
        if not print_queue:
            return

        for chunksize in [4096, 256, 64, 8, 1]:
            if not print_queue: break
            maxchunkidx = 0
            chunksize = 32
            for chunkrange, chunk in enumerate(chunks(print_queue[0], chunksize, enum=True)):
                begin, end = chunkrange
                if get_linecount(printed_so_far + [char]) < term.height:
                    printed_so_far.append(chunk)
                    printed = True
                    sys.stdout.write(chunk)
                    maxidx = end
                else:
                    break
            print_queue[0] = print_queue[maxidx:]
            if not print_queue[0]:
                print_queue[:] = print_queue[1:]
    finally:
        if printed:
            sys.stdout.flush()

def execute(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # Poll process for new output until finished
    now = time.time()
    last = 0
    printed_so_far = []
    print_queue = []
    print(term.height)
    try:
        while process.poll() is None:
            if now - last > 0.01:
                size = 1
            else:
                size = min(size*2, 1024)

            last = time.time()
            content = process.stdout.read(size)
            now = time.time()
            print_queue.append(content)
            print_what_we_can(printed_so_far, print_queue)
            if print_queue:
                print("Printed line count:", get_linecount("".join(printed_so_far)))
                raise KeyboardInterrupt
        print_queue += process.stdout.read()
        print_what_we_can(printed_so_far, print_queue)
    except KeyboardInterrupt:
        process.send_signal(signal.SIGINT)
        for x in range(30):
            time.sleep(0.002)
            if process.poll(): return process.poll()
        process.terminate()
        for x in range(60):
            time.sleep(0.002)
            if process.poll(): return process.poll()
        process.kill()
        for x in range(100):
            time.sleep(0.01)
            if process.poll(): return process.poll()
        print("Process somehow still alive after kill... This shouldn't happen but is imaginable, your kernel may be fucked up or something")
    return process.poll()


sys.exit(execute(argv))
