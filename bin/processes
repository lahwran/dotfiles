#!/usr/bin/env python3.6
import pprint
import sys
import psutil
from datetime import timedelta
import time
#import msgpack
import argparse
import blessed

parser = argparse.ArgumentParser()
parser.add_argument("-w", "--watch", nargs="?", default=None, const=60, type=float)

def pinfo(delta_from=()):
    thisproc = psutil.Process()
    parent = thisproc.parent()
    exclude = {thisproc.pid}
    if parent.name() == "sudo":
        exclude.add(parent.pid)
    chrome_total = {
        "name": "[Chrome Total]",
        "cmdline": ["[Chrome Total]"],
        "cpu_times_user_eff": 0.0,
        "cpu_times_sys_eff": 0.0,
        "dur_eff": 0.0,
        "pid": -1,
    }
    res = []
    last = {x["pid"]: x for x in delta_from}
    for process in psutil.process_iter(attrs=["cpu_times", "create_time", "username", "terminal", "status", "pid", "nice", "name", "memory_percent", "memory_info", "cmdline"]):
        if process.pid in exclude: continue
        info = dict(process.info)
        info["dur"] = time.time() - process.info["create_time"]
        info["cpu_times_user"] = 0
        info["cpu_times_sys"]  = 0
        if info["cpu_times"]:
            info["cpu_times_user"] = info["cpu_times"].user
            info["cpu_times_sys"] = info["cpu_times"].system
        lastproc = last.get(info["pid"], {})
        info["cpu_times_user_eff"] = info["cpu_times_user"] - lastproc.get("cpu_times_user", 0)
        info["cpu_times_sys_eff"]  = info["cpu_times_sys"]  - lastproc.get("cpu_times_sys", 0)
        info["dur_eff"]            = info["dur"]            - lastproc.get("dur", 0)
        info["td"]                  = timedelta(seconds=round(info["dur_eff"],1))

        if info["cpu_times"] is None:
            info["percent_user"] = -1
            info["percent_sys"] = -1
            info["percent_total"] = -1
        else:
            info["percent_user"]  =  info["cpu_times_user_eff"] / info["dur_eff"]
            info["percent_sys"]   =  info["cpu_times_sys_eff"] / info["dur_eff"]
            info["percent_total"] = info["percent_user"] + info["percent_sys"]
            if "chrome" in info["name"].lower():
                chrome_total["cpu_times_user_eff"] += info["cpu_times_user_eff"]
                chrome_total["cpu_times_sys_eff"] += info["cpu_times_sys_eff"]
                chrome_total["dur_eff"] += info["dur_eff"]
                continue
        res.append(info)
    chrome_total["td"] = timedelta(seconds=chrome_total["dur_eff"])
    chrome_total["percent_user"]  = chrome_total["cpu_times_user_eff"] / chrome_total["dur_eff"]
    chrome_total["percent_sys"]   = chrome_total["cpu_times_sys_eff"]  / chrome_total["dur_eff"]
    chrome_total["percent_total"] = chrome_total["percent_user"]   + chrome_total["percent_sys"]
    res.append(chrome_total)
    return res


def format_info(info, sort="percent_total", limit=0):
    res = []
    for info in sorted(info, key=lambda x: x[sort] or 0)[-limit:]:
        res.append(f"{info['name'].rjust(30)[-30:]} ({info['pid']:6d}): {100*(info['percent_total']):6.3f}% total, {100*(info['percent_user']):6.3f}% user, {100*(info['percent_sys']):6.3f}% sys, over {info['td']}")
    return "\n".join(res)+"\n"

def main(watch):
    info = pinfo()
    term = blessed.Terminal()
    sys.stdout.write(format_info(info, limit=(term.height - 1) if watch else None))
    if watch is None:
        sys.stdout.flush()
        return
    sys.stdout.write("\n")
    try:
        a = time.time()
        while True:
            sys.stdout.flush()
            b = time.time()
            time.sleep(watch-(b-a))
            a = time.time()
            info = pinfo(info)
            sys.stdout.write(term.clear+format_info(info, limit=term.height//2)+"\n")
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    args = parser.parse_args()
    main(**vars(args))
