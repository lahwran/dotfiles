#!/usr/bin/python
"""
Tool for deleting large downloadable files without losing information on what
they were
"""
import os
import sys
import stat
import json
import grp
import pwd
import datetime
import hashlib
import time
import platform
import socket
import argparse


def iterfile(f, bufsize=None):
    if not bufsize:
        bufsize = 8192
    while True:
        buff = f.read(bufsize)
        if not buff:
            break
        yield buff


def hashfile(filename, statsize, bufsize=None):
    with open(filename, "rb") as f:
        sha = hashlib.sha256()
        md5 = hashlib.md5()
        progress = 0
        lastprogress = 0

        for chunk in iterfile(f):
            progress += len(chunk)
            if time.time() - lastprogress > 1:
                print "%0.2f%%" % ((float(progress) / float(statsize)) * 100)
                lastprogress = time.time()

            sha.update(chunk)
            md5.update(chunk)
            

    return {
        "sha256": sha.hexdigest(),
        "md5": md5.hexdigest()
    }


def summarize_gid(gid):
    group = grp.getgrgid(gid)
    return {
        "name": group.gr_name,
        "gid": group.gr_gid
    }


def summarize_uid(uid):
    try:
        user = pwd.getpwuid(uid)
        return {
            "name": user.pw_name,
            "uid": user.pw_uid,
            "group": summarize_gid(user.pw_gid),
            "gecos": user.pw_gecos,
        }
    except KeyError:
        return {
            "uid": uid
        }


def summarize(filename, skip_summaries=True, no_open=False, overwrite=False):
    if skip_summaries and filename.endswith(".summary"):
        try:
            json.loads(open(filename).read(1024**3))
        except ValueError:
            pass
        else:
            return []

    return _summarize(filename, skip_summaries, no_open, overwrite)

def lockfiles(filename):
    result = [os.path.join(os.path.dirname(filename), ".dontsummarize")]
    if os.path.isdir(filename):
        result.append(os.path.join(filename, ".dontsummarize"))
    return result

def safeopenwriter(filename, overwrite):
    #if not overwrite:
    #    flags = os.O_WRONLY | os.O_CREAT | os.O_EXCL
    #    if getattr(os, "O_BINARY", None) is not None:
    #        flags |= os.O_BINARY
    #    fd = os.open(filename, flags)
    #    return os.fdopen(fd)
    #else:
    return open(filename, "wb")

def _summarize(filename, skip_summaries, no_open, overwrite):
    filename = os.path.expanduser(filename)
    filename = os.path.normpath(filename)
    filename = os.path.abspath(filename)

    lockreasons = []
    for lockfile in lockfiles(filename):
        if os.path.exists(lockfile):
            lockreasons.append(open(lockfile).read().strip())
    if lockreasons:
        for lockreason in lockreasons:
            print ".dontsummarize:", lockreason
            sys.exit(1)
    assert not lockreasons
    summary = {}

    try:
        stat = None
        stat = os.stat(filename)
    except OSError:
        pass
    else:
        summary["stat"] = {
            "mode": stat.st_mode,
            "mode_oct": oct(stat.st_mode),
            "mode_bin": bin(stat.st_mode),
            "inode": stat.st_ino,
            "device": stat.st_dev,
            "links": stat.st_nlink,
            "owner_user": summarize_uid(stat.st_uid),
            "owner_group": summarize_gid(stat.st_gid),
            "size": stat.st_size,
            "time": {
                "access": stat.st_atime,
                "modification": stat.st_mtime,
                "creation": stat.st_ctime
            }
        }
    try:
        lstat = os.lstat(filename)
    except OSError:
        pass
    else:
        if lstat != stat:
            try:
                summary["link"] = os.readlink(filename)
            except OSError:
                pass
            summary["lstat"] = {
                "mode": lstat.st_mode,
                "mode_oct": oct(lstat.st_mode),
                "mode_bin": bin(lstat.st_mode),
                "inode": lstat.st_ino,
                "device": lstat.st_dev,
                "links": lstat.st_nlink,
                "owner_user": summarize_uid(lstat.st_uid),
                "owner_group": summarize_gid(lstat.st_gid),
                "size": lstat.st_size,
                "time": {
                    "access": lstat.st_atime,
                    "modification": lstat.st_mtime,
                    "creation": lstat.st_ctime
                }
            }

    summary["filename"] = {
        "basename": os.path.basename(filename),
        "dirname": os.path.dirname(filename)
    }
    if not no_open:
        summary["hash"] = hashfile(filename, stat.st_size)
    
    timeformat = "%B %d, %Y %I:%M:%S %p"
    summary["timestamp"] = datetime.datetime.now().strftime(timeformat)
    summary["hostname"] = platform.node()
    summary["hostdns"] = socket.gethostname()

    def makename(index):
        if index == 0:
            return filename + ".summary"
        return (filename + ".summary%d") % index
    index = 0
    summaryfile = makename(0)
    while (not overwrite) and os.path.exists(summaryfile):
        index += 1
        summaryfile = makename(index)
    with safeopenwriter(summaryfile, overwrite) as writer:
        writer.write(json.dumps(summary, indent=4, sort_keys=True))

    print "Written to", summaryfile
    print "You may now delete original file:"
    filename_ = filename.replace("'", """'"'"'""")
    print "rm '%s'" % filename_

    return [filename]

parser = argparse.ArgumentParser()
parser.add_argument("--delete-when-done", action="store_true")
parser.add_argument("--dont-summarize", action="store_true")
parser.add_argument("--dont-hash", action="store_true")
parser.add_argument("--recurse", action="store_true")
parser.add_argument("--dont-skip-summaries", action="store_true")
parser.add_argument("--overwrite", action="store_true", help="overwrite old summaries")
parser.add_argument("files", nargs="*")

def main(args):
    global _summarize

    deletes = []
    do_delete = args.delete_when_done
    skip_summaries = not args.dont_skip_summaries
    if args.dont_summarize:
        _summarize = lambda x, y, z: [x]
    print args.files
    for x in args.files:
        if args.recurse:
            results = recursive(x, skip_summaries, args.dont_hash, args.overwrite)
        else:
            results = summarize(x, skip_summaries, args.dont_hash, args.overwrite)
        deletes.extend(results)

    if do_delete:
        import pprint
        pprint.pprint(deletes)
        assert raw_input("continue? y/error ") == "y"
        for x in deletes:
            os.unlink(x)

def recursive(directory, skip_summaries=True, dont_hash=False, overwrite=False):
    import os
    results = []

    for root, dirs, files in os.walk(directory):
        summarize(root, skip_summaries=False,
                no_open=True, overwrite=overwrite)
        for x in files:
            results.extend(summarize(os.path.join(root, x),
                skip_summaries=skip_summaries, no_open=dont_hash, overwrite=overwrite))

    return results


if __name__ == "__main__":
    args = parser.parse_args()
    main(args)
