#!/usr/bin/python
import re
import argparse
import collections

parser = argparse.ArgumentParser()
parser.add_argument("command", help="extract or inline")
parser.add_argument("filename")
args = parser.parse_args()

assert args.command in ["extract", "inline"]


def pairs(iterable):
    "pairs(iterable) -> (s0, s1), (s1,s2), (s2, s3), etc"
    from itertools import tee, izip
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)


if __name__ == "__main__":
    f = open(args.filename)

    sections = collections.deque()
    sections.append({})

    current_unknown = None
    current_unk_depth = None
    current_key = None
    for line in f:
        line = line.replace("\n", "")
        flagline = re.match(r"^-{4,}$", line)
        if flagline:
            sections.appendleft({})
            current_key = None
            continue

        match = re.match(r"^((?: )*)(?:(\? ?)|@ ?([0-9]+)|)((?:[^:#])*)(:? ?#([0-9]+))?(.*)$", line)
        depth = len(match.group(1))
        is_q = bool(match.group(2))
        is_ref = bool(match.group(3))
        ref = int(match.group(3)) if is_ref else None
        idprefix = match.group(4) or ""
        id_ = match.group(5)
        if id_:
            id_ = int(id_)
        else:
            id_ = None
        text = match.group(6) or ""

        if (depth == 0 and (text.strip() or is_q or is_ref)) \
                or (not sections[0] and (text or depth or is_q or is_ref or ref)):
            if id_ is not None and id_ not in sections[0]:
                current_key = id_
            elif len(sections[0]):
                current_key = max(sections[0].keys()) + 1
            else:
                current_key = 0
            sections[0][current_key] = []


        if current_key is None:
            continue

        sections[0][current_key].append((depth, is_q, is_ref, ref, idprefix, id_ if depth > 0 else current_key, text))

    i = 0
    while i < len(sections):
        section = sections[i]

        for sindex in sorted(section.keys()):
            old_block = section[sindex]
            block = []
            section[sindex] = block

            current_ref = None
            ref_depth = None

            for index, value in enumerate(old_block):
                depth, is_q, is_ref, ref, idprefix, id_, text = value
                if current_ref and depth > ref_depth:
                    assert not is_ref
                    current_ref.append((depth - ref_depth, is_q, False, False,
                        idprefix, id_, text))
                    continue

                current_ref = None
                ref_depth = None

                if is_q:
                    if len(sections) == i + 1:
                        sections.append({})
                    next_section = sections[i+1]
                    index = max(next_section.keys()) + 1
                    block.append((depth, False, True, index, "", None, ""))
                    current_ref = []
                    ref_depth = depth
                    next_section.append(current_ref)
                    current_ref.append((0, False, False, None, idprefix, index, text))
                    continue

                block.append(value)

        i += 1
                        #try:
                        #except:
                        #    import pprint
                        #    print ref
                        #    print block[i]
                        #    pprint.pprint([a])
                        #    raise

    if args.command == "inline":
        for a, b in pairs(reversed(sections)):
            for block in b.values():
                i = 0
                while i < len(block):
                    depth, is_q, is_ref, ref, idprefix, id_, text = block[i]
                    if is_ref:
                        filtered = [[dd + depth, iq, False, None, idp, id_, tx]
                                for dd, iq, ir, rr, idp, id_, tx in a[ref-1]]
                        filtered[0][1] = True
                        filtered[0][5] = None

                        if i < len(block) - 1:
                            block[i:i+1] = filtered
                        else:
                            block[i:] = filtered
                    i += 1
        sections = [sections[0]]


    output = []
    for index, section in enumerate(reversed(sections)):
        if index != 0:
            output.append("")
            output.append("-"*50)
            output.append("")

        for key, block in sorted(section.items()):
            for depth, is_q, is_ref, ref, idprefix, id_, text in block:
                has_id = (depth > 0 or index != len(sections) - 1) and id_
                formatted = "".join([
                    " " * depth,
                    "? " if is_q else "",
                    "@ " if is_ref else "",
                    str(ref) if is_ref else "",
                    idprefix or "",
                    " #%d" % id_ if id_ else "",
                    text if not is_ref else ""
                ])
                output.append(formatted)
    print "\n".join(output)
    


"""


        if current_unknown is not None and depth > current_unk_depth:
            current_unknown.append((depth - current_unk_depth, line))
            continue

        current_unknown = None
        current_unknown_depth = None
        
        if is_q:
            current_unknown = [(0, text)]
            current_unknown_depth = depth
            text = ""



"""

            

