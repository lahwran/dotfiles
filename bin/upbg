#!/bin/bash
img="$(osascript -e 'tell application "System Events" to tell first Desktop to get its picture' || echo "failed")"
touch ~/.blurcache/allimages.txt
cp ~/.blurcache/allimages.txt{,.temp}
echo $img >> ~/.blurcache/allimages.txt.temp
cat ~/.blurcache/allimages.txt.temp | sort | uniq > ~/.blurcache/allimages.txt
if [ "$img" = "failed" ]; then
    exit
fi
hash="$(echo "$img" | /usr/local/Cellar/coreutils/8.31/libexec/gnubin/sha256sum | awk '{print $1}')"
if ! [ -d ~/.blurcache ] ; then
    mkdir -p ~/.blurcache
fi
export cimg="$HOME/.blurcache/$hash.jpg"
export ccolor="$HOME/.blurcache/$hash.color"
export cinfo="$HOME/.blurcache/$hash.info"
echo "name: '$img'" > $cinfo
echo "color: $ccolor " > $cinfo
if ! [ -e "$cimg" ] ; then
    /usr/local/bin/convert "$img"  -crop +0+600 +repage -interpolate Nearest -filter point -resize 25% -filter Gaussian -define filter:sigma=2.5 -resize 400% "$cimg"
fi
if ! [ -e "$ccolor" ] ; then
    export color="$(/usr/local/bin/convert "$cimg" -resize 10% +repage -crop 0x20+0+0 +repage -colors 6 -format %c histogram:info: | sort -n | tail -n 1 | sed -E 's/^.*srgb\(([0-9]+), *([0-9]+), *([0-9]+)\)/[\1,\2,\3]/g')"
    echo "$color" > "$ccolor"
else
    export color="$(cat "$ccolor")"
fi
python <<END

# includes copy and paste of hsluv because I'm being lazy about setting up system python's paths
# todo: would be a lot easier if I had a dotfiles-scripts ve that I could reliably reference on any dotfiles-managed system

# === BEGIN HSLuv dd0482 ===

import os,json,sys
""" This module is generated by transpiling Haxe into Python and cleaning
the resulting code by hand, e.g. removing unused Haxe classes. To try it
yourself, clone https://github.com/hsluv/hsluv and run:

    haxe -cp haxe/src hsluv.Hsluv -python hsluv.py
"""

import math



__version__ = '0.0.2'

m = [[3.240969941904521, -1.537383177570093, -0.498610760293],
     [-0.96924363628087, 1.87596750150772, 0.041555057407175],
     [0.055630079696993, -0.20397695888897, 1.056971514242878]]
minv = [[0.41239079926595, 0.35758433938387, 0.18048078840183],
        [0.21263900587151, 0.71516867876775, 0.072192315360733],
        [0.019330818715591, 0.11919477979462, 0.95053215224966]]
refY = 1.0
refU = 0.19783000664283
refV = 0.46831999493879
kappa = 903.2962962
epsilon = 0.0088564516
hex_chars = "0123456789abcdef"


def _distance_line_from_origin(line):
    v = math.pow(line['slope'], 2) + 1
    return math.fabs(line['intercept']) / math.sqrt(v)


def _length_of_ray_until_intersect(theta, line):
    return line['intercept'] / (math.sin(theta) - line['slope'] * math.cos(theta))


def _get_bounds(l):
    result = []
    sub1 = math.pow(l + 16, 3) / 1560896
    if sub1 > epsilon:
        sub2 = sub1
    else:
        sub2 = l / kappa
    _g = 0
    while _g < 3:
        c = _g
        _g = _g + 1
        m1 = m[c][0]
        m2 = m[c][1]
        m3 = m[c][2]
        _g1 = 0
        while _g1 < 2:
            t = _g1
            _g1 = _g1 + 1
            top1 = (284517 * m1 - 94839 * m3) * sub2
            top2 = (838422 * m3 + 769860 * m2 + 731718 * m1) * l * sub2 - (769860 * t) * l
            bottom = (632260 * m3 - 126452 * m2) * sub2 + 126452 * t
            result.append({'slope': top1 / bottom, 'intercept': top2 / bottom})
    return result


def _max_safe_chroma_for_l(l):
    bounds = _get_bounds(l)
    _hx_min = 1.7976931348623157e+308
    _g = 0
    while _g < 2:
        i = _g
        _g = _g + 1
        length = _distance_line_from_origin(bounds[i])
        if math.isnan(_hx_min):
            _hx_min = _hx_min
        elif math.isnan(length):
            _hx_min = length
        else:
            _hx_min = min(_hx_min, length)
    return _hx_min


def _max_chroma_for_lh(l, h):
    hrad = h / 360 * math.pi * 2
    bounds = _get_bounds(l)
    _hx_min = 1.7976931348623157e+308
    _g = 0
    while _g < len(bounds):
        bound = bounds[_g]
        _g = (_g + 1)
        length = _length_of_ray_until_intersect(hrad, bound)
        if length >= 0:
            if math.isnan(_hx_min):
                _hx_min = _hx_min
            elif math.isnan(length):
                _hx_min = length
            else:
                _hx_min = min(_hx_min, length)
    return _hx_min


def _dot_product(a, b):
    sum = 0
    _g1 = 0
    _g = len(a)
    while _g1 < _g:
        i = _g1
        _g1 = _g1 + 1
        sum += a[i] * b[i]
    return sum


def _from_linear(c):
    if c <= 0.0031308:
        return 12.92 * c
    else:
        return 1.055 * math.pow(c, 0.416666666666666685) - 0.055


def _to_linear(c):
    if c > 0.04045:
        return math.pow((c + 0.055) / 1.055, 2.4)
    else:
        return c / 12.92


def xyz_to_rgb(_hx_tuple):
    return [
        _from_linear(_dot_product(m[0], _hx_tuple)),
        _from_linear(_dot_product(m[1], _hx_tuple)),
        _from_linear(_dot_product(m[2], _hx_tuple))]


def rgb_to_xyz(_hx_tuple):
    rgbl = [_to_linear(_hx_tuple[0]),
            _to_linear(_hx_tuple[1]),
            _to_linear(_hx_tuple[2])]
    return [_dot_product(minv[0], rgbl),
            _dot_product(minv[1], rgbl),
            _dot_product(minv[2], rgbl)]


def _y_to_l(y):
    if y <= epsilon:
        return y / refY * kappa
    else:
        return 116 * math.pow(y / refY, 0.333333333333333315) - 16


def _l_to_y(l):
    if l <= 8:
        return refY * l / kappa
    else:
        return refY * math.pow((l + 16) / 116, 3)


def xyz_to_luv(_hx_tuple):
    x = float(_hx_tuple[0])
    y = float(_hx_tuple[1])
    z = float(_hx_tuple[2])
    divider = x + 15 * y + 3 * z
    var_u = 4 * x
    var_v = 9 * y
    if divider != 0:
        var_u = var_u / divider
        var_v = var_v / divider
    else:
        var_u = float("nan")
        var_v = float("nan")
    l = _y_to_l(y)
    if l == 0:
        return [0, 0, 0]
    u = 13 * l * (var_u - refU)
    v = 13 * l * (var_v - refV)
    return [l, u, v]


def luv_to_xyz(_hx_tuple):
    l = float(_hx_tuple[0])
    u = float(_hx_tuple[1])
    v = float(_hx_tuple[2])
    if l == 0:
        return [0, 0, 0]
    var_u = u / (13 * l) + refU
    var_v = v / (13 * l) + refV
    y = _l_to_y(l)
    x = 0 - ((9 * y * var_u) / (((var_u - 4) * var_v) - var_u * var_v))
    z = (((9 * y) - (15 * var_v * y)) - (var_v * x)) / (3 * var_v)
    return [x, y, z]


def luv_to_lch(_hx_tuple):
    l = float(_hx_tuple[0])
    u = float(_hx_tuple[1])
    v = float(_hx_tuple[2])
    _v = (u * u) + (v * v)
    if _v < 0:
        c = float("nan")
    else:
        c = math.sqrt(_v)
    if c < 0.00000001:
        h = 0
    else:
        hrad = math.atan2(v, u)
        h = hrad * 180.0 / 3.1415926535897932
        if h < 0:
            h = 360 + h
    return [l, c, h]


def lch_to_luv(_hx_tuple):
    l = float(_hx_tuple[0])
    c = float(_hx_tuple[1])
    h = float(_hx_tuple[2])
    hrad = h / 360.0 * 2 * math.pi
    u = math.cos(hrad) * c
    v = math.sin(hrad) * c
    return [l, u, v]


def hsluv_to_lch(_hx_tuple):
    h = float(_hx_tuple[0])
    s = float(_hx_tuple[1])
    l = float(_hx_tuple[2])
    if l > 99.9999999:
        return [100, 0, h]
    if l < 0.00000001:
        return [0, 0, h]
    _hx_max = _max_chroma_for_lh(l, h)
    c = _hx_max / 100 * s
    return [l, c, h]


def lch_to_hsluv(_hx_tuple):
    l = float(_hx_tuple[0])
    c = float(_hx_tuple[1])
    h = float(_hx_tuple[2])
    if l > 99.9999999:
        return [h, 0, 100]
    if l < 0.00000001:
        return [h, 0, 0]
    _hx_max = _max_chroma_for_lh(l, h)
    s = c / _hx_max * 100
    return [h, s, l]


def hpluv_to_lch(_hx_tuple):
    h = float(_hx_tuple[0])
    s = float(_hx_tuple[1])
    l = float(_hx_tuple[2])
    if l > 99.9999999:
        return [100, 0, h]
    if l < 0.00000001:
        return [0, 0, h]
    _hx_max = _max_safe_chroma_for_l(l)
    c = _hx_max / 100 * s
    return [l, c, h]


def lch_to_hpluv(_hx_tuple):
    l = float(_hx_tuple[0])
    c = float(_hx_tuple[1])
    h = float(_hx_tuple[2])
    if l > 99.9999999:
        return [h, 0, 100]
    if l < 0.00000001:
        return [h, 0, 0]
    _hx_max = _max_safe_chroma_for_l(l)
    s = c / _hx_max * 100
    return [h, s, l]


def rgb_to_hex(_hx_tuple):
    h = "#"
    _g = 0
    while _g < 3:
        i = _g
        _g = _g + 1
        chan = float(_hx_tuple[i])
        c = math.floor(chan * 255 + 0.5)
        digit2 = int(c % 16)
        digit1 = int((c - digit2) / 16)

        h += hex_chars[digit1] + hex_chars[digit2]
    return h


def hex_to_rgb(hex):
    hex = hex.lower()
    ret = []
    _g = 0
    while _g < 3:
        i = _g
        _g = _g + 1
        index = i * 2 + 1
        _hx_str = hex[index]
        digit1 = hex_chars.find(_hx_str)
        index1 = i * 2 + 2
        str1 = hex[index1]
        digit2 = hex_chars.find(str1)
        n = digit1 * 16 + digit2
        ret.append(n / 255.0)
    return ret


def lch_to_rgb(_hx_tuple):
    return xyz_to_rgb(luv_to_xyz(lch_to_luv(_hx_tuple)))


def rgb_to_lch(_hx_tuple):
    return luv_to_lch(xyz_to_luv(rgb_to_xyz(_hx_tuple)))


def hsluv_to_rgb(_hx_tuple):
    return lch_to_rgb(hsluv_to_lch(_hx_tuple))


def rgb_to_hsluv(_hx_tuple):
    return lch_to_hsluv(rgb_to_lch(_hx_tuple))


def hpluv_to_rgb(_hx_tuple):
    return lch_to_rgb(hpluv_to_lch(_hx_tuple))


def rgb_to_hpluv(_hx_tuple):
    return lch_to_hpluv(rgb_to_lch(_hx_tuple))


def hsluv_to_hex(_hx_tuple):
    return rgb_to_hex(hsluv_to_rgb(_hx_tuple))


def hpluv_to_hex(_hx_tuple):
    return rgb_to_hex(hpluv_to_rgb(_hx_tuple))


def hex_to_hsluv(s):
    return rgb_to_hsluv(hex_to_rgb(s))


def hex_to_hpluv(s):
    return rgb_to_hpluv(hex_to_rgb(s))
# === END HSLuv dd0482 ===

fn="/Users/lahwran/Library/Application Support/iTerm2/DynamicProfiles/test.json"
c=json.loads(open(fn, "r").read())
img=os.environ["cimg"].strip()
def lerp(x,y,amt):
    return y*amt + x*(1-amt)
def color(config):
    base = config.get("base", [0,0,0])
    sky_amount = config.get("sky", [0,0,0])
    loaded = json.loads(os.environ["color"])
    loaded_hsluv = rgb_to_hsluv([float(x)/256 for x in loaded])
    lerped = [lerp(x,y,amt) for x,y,amt in zip(base,loaded_hsluv,sky_amount)]
    rgb = hsluv_to_rgb(lerped)
    cl=dict(("{} Component".format(name), float(x)) for name, x in zip(["Red","Green","Blue"], rgb))
    cl["Color Space"]="sRGB"
    return cl
[x.update({"Background Image Location":img, "Background Color": color(x.get("_colorinfo", {}))}) for x in c["Profiles"]]
dumped = json.dumps(c, sort_keys=True, indent=4)
if c and dumped:
    open(fn, "w").write(dumped)
END
echo -en '\033]1337;SetProfile=Dev (dark dynamic)\007'
#{
#    "ASCII Anti Aliased": true,
#    "AWDS Pane Directory": "",
#    "AWDS Pane Option": "No",
#    "AWDS Tab Directory": "",
#    "AWDS Tab Option": "No",
#    "AWDS Window Directory": "",
#    "AWDS Window Option": "No",
#    "Allow Title Reporting": false,
#    "Ambiguous Double Width": false,
#    "Ansi 0 Color": {
#        "Blue Component": 0.13333333333333333,
#        "Green Component": 0.1568627450980392,
#        "Red Component": 0.15294117647058825
#    },
#    "Ansi 1 Color": {
#        "Blue Component": 0.36258910233725705,
#        "Green Component": 0.0465142138171817,
#        "Red Component": 0.8868778280542986
#    },
#    "Ansi 10 Color": {
#        "Blue Component": 0.19305520451816857,
#        "Green Component": 0.9457013574660633,
#        "Red Component": 0.6931359750161006
#    },
#    "Ansi 11 Color": {
#        "Blue Component": 0.12156862745098039,
#        "Green Component": 0.592156862745098,
#        "Red Component": 0.9921568627450981
#    },
#    "Ansi 12 Color": {
#        "Blue Component": 1,
#        "Green Component": 0.7637450098991394,
#        "Red Component": 0.4663928747177124
#    },
#    "Ansi 13 Color": {
#        "Blue Component": 1,
#        "Green Component": 0.6277649998664856,
#        "Red Component": 0.7373318672180176
#    },
#    "Ansi 14 Color": {
#        "Blue Component": 1,
#        "Green Component": 0.9674288620896723,
#        "Red Component": 0.3854173962277291
#    },
#    "Ansi 15 Color": {
#        "Blue Component": 1,
#        "Green Component": 1,
#        "Red Component": 1
#    },
#    "Ansi 2 Color": {
#        "Blue Component": 0.1803921568627451,
#        "Green Component": 0.8862745098039215,
#        "Red Component": 0.6509803921568628
#    },
#    "Ansi 3 Color": {
#        "Blue Component": 0.2848558927980775,
#        "Green Component": 0.8802977701022725,
#        "Red Component": 0.9019607843137255
#    },
#    "Ansi 4 Color": {
#        "Blue Component": 0.9725490212440491,
#        "Green Component": 0.6668457984924316,
#        "Red Component": 0.26076504588127136
#    },
#    "Ansi 5 Color": {
#        "Blue Component": 1,
#        "Green Component": 0.42774189490844805,
#        "Red Component": 0.6486070716761733
#    },
#    "Ansi 6 Color": {
#        "Blue Component": 0.9276018099547512,
#        "Green Component": 0.8366736122325629,
#        "Red Component": 0.28807048149237147
#    },
#    "Ansi 7 Color": {
#        "Blue Component": 0.9490196108818054,
#        "Green Component": 0.9725490212440491,
#        "Red Component": 0.9725490212440491
#    },
#    "Ansi 8 Color": {
#        "Blue Component": 0.3686274509803922,
#        "Green Component": 0.44313725490196076,
#        "Red Component": 0.4588235294117647
#    },
#    "Ansi 9 Color": {
#        "Alpha Component": 1,
#        "Blue Component": 0.37729203140385437,
#        "Color Space": "sRGB",
#        "Green Component": 0.062392019433900714,
#        "Red Component": 0.9623260498046875
#    },
#    "Automatically Log": false,
#    "BM Growl": true,
#    "Background Color": {
#        "Alpha Component": 1,
#        "Blue Component": 0.1411764705882353,
#        "Color Space": "sRGB",
#        "Green Component": 0.3686274509803922,
#        "Red Component": 0.35294117647058826
#    },
#    "Background Image Is Tiled": false,
#    "Background Image Location": "/Users/lahwran/.blurcache/1b382433dafa9401aa817966e5f2a525fc8250ff461fb8085c2ca07de0acb5c4.jpg",
#    "Background Image Mode": 1,
#    "Badge Color": {
#        "Alpha Component": 0.5,
#        "Blue Component": 0,
#        "Color Space": "sRGB",
#        "Green Component": 0.1491314172744751,
#        "Red Component": 1
#    },
#    "Blend": 0.5150531572164948,
#    "Blink Allowed": false,
#    "Blinking Cursor": false,
#    "Blur": false,
#    "Blur Radius": 2.8634022049492383,
#    "Bold Color": {
#        "Blue Component": 0.9490196078431372,
#        "Green Component": 0.9725490196078431,
#        "Red Component": 0.9725490196078431
#    },
#    "Character Encoding": 4,
#    "Close Sessions On End": true,
#    "Columns": 120,
#    "Command": "/bin/",
#    "Cursor Boost": 0,
#    "Cursor Color": {
#        "Blue Component": 0.18039216101169586,
#        "Green Component": 0.886274516582489,
#        "Red Component": 0.6509804129600525
#    },
#    "Cursor Guide Color": {
#        "Alpha Component": 0.25,
#        "Blue Component": 1,
#        "Color Space": "sRGB",
#        "Green Component": 0.9268307089805603,
#        "Red Component": 0.7021318674087524
#    },
#    "Cursor Text Color": {
#        "Blue Component": 0.9490196108818054,
#        "Green Component": 0.9725490212440491,
#        "Red Component": 0.9725490212440491
#    },
#    "Cursor Type": 2,
#    "Custom Command": "No",
#    "Custom Directory": "No",
#    "Default Bookmark": "No",
#    "Disable Printing": false,
#    "Disable Smcup Rmcup": false,
#    "Disable Window Resizing": true,
#    "Dynamic Profile Filename": "/Users/lahwran/Library/Application Support/iTerm2/DynamicProfiles/test.json",
#    "Dynamic Profile Parent Name": "Dev (dark)",
#    "Flashing Bell": false,
#    "Foreground Color": {
#        "Alpha Component": 1,
#        "Blue Component": 0.9871161444694306,
#        "Color Space": "sRGB",
#        "Green Component": 0.9965138706257375,
#        "Red Component": 1
#    },
#    "Guid": "dynamicbackground",
#    "Hide After Opening": false,
#    "Horizontal Spacing": 1,
#    "Idle Code": 0,
#    "Initial Text": "",
#    "Jobs to Ignore": [
#        "rlogin",
#        "ssh",
#        "slogin",
#        "telnet"
#    ],
#    "Keyboard Map": {
#        "0x6d-0x100000": {
#            "Action": 37,
#            "Text": "dynamicbackgroundlight"
#        },
#        "0x6e-0x100000": {
#            "Action": 26,
#            "Text": "dynamicbackground"
#        },
#        "0x74-0x100000": {
#            "Action": 27,
#            "Text": "dynamicbackground"
#        }
#    },
#    "Link Color": {
#        "Alpha Component": 1,
#        "Blue Component": 0.734233021736145,
#        "Color Space": "sRGB",
#        "Green Component": 0.3591606020927429,
#        "Red Component": 0
#    },
#    "Log Directory": "",
#    "Minimum Contrast": 0,
#    "Mouse Reporting": true,
#    "Name": "Dev (dark dynamic)",
#    "Non Ascii Font": "Menlo-Regular 12",
#    "Non-ASCII Anti Aliased": true,
#    "Normal Font": "Menlo-Regular 12",
#    "Only The Default BG Color Uses Transparency": false,
#    "Option Key Sends": 2,
#    "Prompt Before Closing 2": 1,
#    "Right Option Key Sends": 0,
#    "Rows": 50,
#    "Screen": -1,
#    "Scrollback Lines": 0,
#    "Scrollback With Status Bar": false,
#    "Scrollback in Alternate Screen": true,
#    "Selected Text Color": {
#        "Blue Component": 1,
#        "Green Component": 1,
#        "Red Component": 1
#    },
#    "Selection Color": {
#        "Blue Component": 0.24313725490196078,
#        "Green Component": 0.2823529411764706,
#        "Red Component": 0.28627450980392155
#    },
#    "Semantic History": {
#        "action": "best editor",
#        "editor": "com.sublimetext.2",
#        "text": ""
#    },
#    "Send Code When Idle": false,
#    "Set Local Environment Vars": true,
#    "Shortcut": "",
#    "Silence Bell": true,
#    "Smart Cursor Color": true,
#    "Smart Selection Rules": [
#        {
#            "notes": "Word bounded by whitespace",
#            "precision": "low",
#            "regex": "\\S+"
#        },
#        {
#            "notes": "C++ namespace::identifier",
#            "precision": "normal",
#            "regex": "([a-zA-Z0-9_]+::)+[a-zA-Z0-9_]+"
#        },
#        {
#            "actions": [],
#            "notes": "Paths",
#            "precision": "normal",
#            "regex": "\\~?/?([[:letter:][:number:]._-]+/+)+[[:letter:][:number:]._-]+/?"
#        },
#        {
#            "notes": "Quoted string",
#            "precision": "normal",
#            "regex": "@?\"(?:[^\"\\\\]|\\\\.)*\""
#        },
#        {
#            "notes": "Java/Python include paths",
#            "precision": "normal",
#            "regex": "([[:letter:][:number:]._]+\\.)+[[:letter:][:number:]._]+"
#        },
#        {
#            "notes": "mailto URL",
#            "precision": "normal",
#            "regex": "\\bmailto:([a-z0-9A-Z_]+@)?([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\b"
#        },
#        {
#            "notes": "Obj-C selector",
#            "precision": "high",
#            "regex": "@selector\\([^)]+\\)"
#        },
#        {
#            "notes": "email address",
#            "precision": "high",
#            "regex": "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\\b"
#        },
#        {
#            "notes": "HTTP URL",
#            "precision": "very_high",
#            "regex": "https?://([a-z0-9A-Z]+(:[a-zA-Z0-9]+)?@)?[a-z0-9A-Z]+(\\.[a-z0-9A-Z]+)*((:[0-9]+)?)(/[a-zA-Z0-9;/\\.\\-_+%?&@=#\\(\\)]*)?"
#        },
#        {
#            "notes": "SSH URL",
#            "precision": "very_high",
#            "regex": "\\bssh:([a-z0-9A-Z_]+@)?([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\b"
#        },
#        {
#            "notes": "Telnet URL",
#            "precision": "very_high",
#            "regex": "\\btelnet:([a-z0-9A-Z_]+@)?([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\b"
#        },
#        {
#            "notes": "Git diff path",
#            "precision": "high",
#            "regex": "(?<= a/| b/)\\~?/?([[:letter:][:number:]._-]+/+)+[[:letter:][:number:]._-]+/?"
#        }
#    ],
#    "Space": 5,
#    "Sync Title": false,
#    "Tags": [
#        "Dynamic"
#    ],
#    "Terminal Type": "xterm-256color",
#    "Thin Strokes": 4,
#    "Transparency": 0,
#    "Triggers": [],
#    "Unicode Normalization": 0,
#    "Unicode Version": 8,
#    "Unlimited Scrollback": true,
#    "Use Bold Font": true,
#    "Use Bright Bold": true,
#    "Use Canonical Parser": false,
#    "Use Cursor Guide": false,
#    "Use Italic Font": true,
#    "Use Non-ASCII Font": false,
#    "Vertical Spacing": 0.9,
#    "Visual Bell": false,
#    "Window Type": 0,
#    "Working Directory": "/Users/lahwran"
#}
