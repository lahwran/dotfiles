#!/usr/bin/python
"""Edit a file in the host nvim instance."""
import os
import sys

try:
    from pynvim import attach
except ImportError:
    try:
        from neovim import attach
    except ImportError:
        print("WARNING: don't have nvim python module, launching without it")
        attach = None

args = sys.argv[1:]

def fullpath(*args):
    _p = os.path
    return _p.abspath(_p.normpath(_p.expanduser(_p.join(*args))))
    del _p

def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file) and os.path.abspath(exe_file) != os.path.abspath(__file__):
                return exe_file

    return None

addr = os.environ.get("NVIM_LISTEN_ADDRESS", None)
if not addr or not args:
    if addr:
        print("Launching from inside nvim, but no pynvim available - cancelling")
        sys.exit()
    try:
        os.execvp('nvim', ["nvim", "-p"] + args)
    except OSError:
        print("Missing nvim, trying vim")
        os.execvp(which('vim'), ["vim", "-p"] + args)
        

nvim = attach("socket", path=addr)

nvim.input('<c-\\><c-n>')  # exit terminal mode
nvim.vars['files_to_edit'] = [fullpath(x) for x in args]
for x in args:
    nvim.command(r'exe "below new ".fnameescape(remove(g:files_to_edit, 0))')
nvim.vars['files_to_edit'] = None
