if ! [ -v BASHRC_GLOBAL_WAS_RUN ] ; then
BASHRC_GLOBAL_WAS_RUN=yes

# !!!!!!!!!!!!!!!!!!!!!!!
#   WARNING: IF BASH FAILS TO LOAD THESE NEXT LINES, IT CAN OBLITERATE YOUR
#   HISTORY.

# I copy my bash history on regular intervals and back it up with
# crashplan. I'll probably make a thing to do
# that automatically eventually, but watch out for failed bash
# startups.
shopt -s histappend
export HISTSIZE=10000000000000
export HISTFILESIZE=10000000000000
if [ -e ~/.bash_history ] && ! [ -e ~/.bash_eternal_history ]; then
    cp ~/.bash_history ~/.bash_eternal_history
fi
export HISTFILE=~/.bash_eternal_history
export HISTIGNORE=""
export HISTCONTROL=""
export HISTTIMEFORMAT="%y-%m-%d %T "

#   END history warning
# .......................

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
# from ubuntu, may be redundant
shopt -s checkwinsize

# End ubuntu defaults

pathappend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="${PATH:+"$PATH:"}$1"
    fi
}

pathprepend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1${PATH:+":$PATH"}"
    fi
}

varappend() {
    if [ -d "$2" ] && [[ ":${!1}:" != *":$2:"* ]]; then
        export $1="${!1:+"${!1}:"}$2"
    fi
}

varprepend() {
    if [ -d "$2" ] && [[ ":$PATH:" != *":$2:"* ]]; then
        export $1="$2${!1:+":${!1}"}"
    fi
}


PROMPT_COMMAND=_promptcommand
function _promptcommand() {
    for command in "${_PROMPT_COMMANDS[@]}"; do
        eval "$command"
    done
}
function add_prompt_command() {
    _PROMPT_COMMANDS=( "${_PROMPT_COMMANDS[@]}" "$1" );
}
pathprepend "$HOME/bin"
pathprepend "$HOME/local/bin"
pathprepend /usr/local/bin

if [ "$NVIM_LISTEN_ADDRESS" != "" ]; then
    export EDITOR="nvim-inner"
    export GIT_EDITOR="nvim-inner"
    function vimcd {
        vimcd_ "$@"
        cd "$@"
    }
else
    function vimcd {
        cd "$@"
    }
fi

# set color prompt
# this function was intended to allow colors to be changed
# based on host, so I could tell computers apart by prompt color.
# I still might do that.
function color {
    # PROMPTCOLOR_user="${PROMTCOLOR_user:-32}"
    # PROMPTCOLOR_at_host="${PROMTCOLOR_at_host:-32}"
    # PROMPTCOLOR_host="${PROMTCOLOR_host:-32}"
    # PROMPTCOLOR_at_path="${PROMTCOLOR_at_path:-32}"
    # PROMPTCOLOR_symbol="${PROMTCOLOR_symbol:-32}"
    if [ "$1" == "user" ]; then
        z="$PROMPTCOLOR_user"
    elif [ "$1" == "at_host" ]; then
        z="$PROMPTCOLOR_at_host"
    elif [ "$1" == "host" ]; then
        z="$PROMPTCOLOR_host"
    elif [ "$1" == "at_path" ]; then
        z="$PROMPTCOLOR_at_path"
    elif [ "$1" == "path" ]; then
        z="$PROMPTCOLOR_path"
    elif [ "$1" == "symbol" ]; then
        z="$PROMPTCOLOR_symbol"
    else
        z=""
    fi
    echo -n '\[\033[m\033['"$z"'m\]'

}
unset c
unset COLORFGBG


# see also http://mywiki.wooledge.org/BashFAQ/088
function flushhistory() {
    history -a;
}
add_prompt_command flushhistory

function updatewindowtitle() {
    echo -ne "\033]0;$PWD - $USER@$HOSTNAME - bash\007"
}
add_prompt_command updatewindowtitle

function display_status() {
    touch ~/.prompt_warning
    w="$(< ~/.prompt_warning)"
    if [ "$w" != "" ]; then
        echo "$w"
    fi
    unset w
}
add_prompt_command display_status

#AUTOVE_DEBUG=1
function avecho() {
    if [ "$AUTOVE_DEBUG" != "" ]; then echo "$@"; fi
}
function get_pwd_ve() {
    if [ -e ve ] ; then
        echo ve
    elif [ -e .venv ] ; then
        echo .venv
    else
        echo ve-*
    fi
}
function autove_label() {
    local pwd_ve="$(get_pwd_ve)"
    # prepend a symbol to indicate automatic activation
    local should_be_active="n";
    if [ "$AUTOVE_ACTIVATED" = "$VIRTUAL_ENV" ] && [ "$AUTOVE_ACTIVATED" != "" ]; then
        should_be_active="y";
    fi
    avecho "label sba=[$should_be_active] ava=[$AUTOVE_ACTIVATED] ve=[$VIRTUAL_ENV] al=[$AUTOVE_ALREADY_LABELED]"
    if [ "$should_be_active" = "y" ] && [ "${PS1:0:1}" != "@" ]; then
        # if the currently active venv was activated automatically, but it's also the one for the dir we're currently in,
        # and we've previously labeled for it before, and the label disappeared, then it's been manually reactivated,
        # and the automatic flag should be cleared
        avecho "label 1. add auto label"
        if [ "$VIRTUAL_ENV" = "$PWD/$pwd_ve" ] && [ "$AUTOVE_ALREADY_LABELED" = "$PWD" ]; then
            avecho "label 2. wait no, this was manual, clear auto flag"
            AUTOVE_ACTIVATED=""
            AUTOVE_ALREADY_LABELED=""
        else
            # but if the currently active venv was activated automatically, and we haven't labeled it before,
            # add a note to PS1 and a note to our future invocations
            avecho "label 3. not manual, add flag"
            PS1="@$PS1"
            AUTOVE_ALREADY_LABELED="$PWD"
        fi
    elif [ "$should_be_active" != "y" ] && [ "${PS1:0:1}" == "@" ]; then
        # if either the currently active venv wasn't activated automatically or there's no active venv,
        # and we still have an automatic label, then we should strip ps1 back to vanilla
        avecho "label 4. no automatic ve but label present, clear label and already_labeled"
        PS1="${PS1:1}"
        AUTOVE_ALREADY_LABELED=""
    elif [ "$should_be_active" != "y" ]; then
        AUTOVE_ALREADY_LABELED=""
    fi
    avecho "label sba=[$should_be_active] ava=[$AUTOVE_ACTIVATED] ve=[$VIRTUAL_ENV] al=[$AUTOVE_ALREADY_LABELED]"
}
function autove() {
    local pwd_ve="$(get_pwd_ve)"
    # if we have a venv active, but its deactivate command is missing, manually do 
    # the steps of deactivate, to reset to a blank slate. this will usually happen
    # due to shell nesting
    avecho "autove 1. start"
    if [ "$VIRTUAL_ENV" != "" ] && ! type deactivate >&/dev/null ; then
        avecho "autove 1. active but no deactivate, manual deactivate"
        AUTOVE_ALREADY_LABELED=""
        if [ -n "${_OLD_VIRTUAL_PATH:-}" ]; then
            PATH="${_OLD_VIRTUAL_PATH:-}";
            export PATH;
            unset _OLD_VIRTUAL_PATH;
        fi;
        if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ]; then
            PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}";
            export PYTHONHOME;
            unset _OLD_VIRTUAL_PYTHONHOME;
        fi;
        if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ]; then
            hash -r;
        fi;
        if [ -n "${_OLD_VIRTUAL_PS1:-}" ]; then
            PS1="${_OLD_VIRTUAL_PS1:-}";
            export PS1;
            unset _OLD_VIRTUAL_PS1;
        fi;
        unset VIRTUAL_ENV;
        if [ ! "$1" = "nondestructive" ]; then
            unset -f deactivate;
        fi
    fi

    # if we have the current dir active, it doesn't matter who activated it, don't mess with it
    if [ "$VIRTUAL_ENV" = "$PWD/$pwd_ve" ]; then
        avecho "autove 2. current dir is active, no further action needed"
        autove_label
        return
    fi
    # if we don't have the current dir active, but we don't have anything else active, and
    # it was activated automatically, don't reactivate it
    if [ "$AUTOVE_ACTIVATED" = "$PWD/$pwd_ve" ] && [ "$VIRTUAL_ENV" = "" ]; then
        avecho "autove 3. current dir was activated automatically and then manually deactivated, no action needed"
        autove_label
        return
    fi
    # if we don't have the current dir active, but the active venv wasn't automatic, also don't mess with it
    if [ "$VIRTUAL_ENV" != "$AUTOVE_ACTIVATED" ]; then
        avecho "autove 4. different dir was activated manually, no action needed"
        AUTOVE_ACTIVATED=""
        autove_label
        return
    fi
    # but if we have an automatically activated venv, and it isn't the current dir, then that should get reset
    if [ "$AUTOVE_ACTIVATED" != "" ]; then
        avecho "autove 5. different dir was activated automatically, deactivate it, clear already_labeled and activated flags"
        deactivate
        AUTOVE_ALREADY_LABELED=""
        AUTOVE_ACTIVATED=""
    fi
    # and at this point we know that there's not a venv active, so check if there's one in the current dir to activate
    avecho "autove 6. no venv is active"
    if [[ $EUID -ne 0 ]] && [ -d $pwd_ve/bin/ ] ; then
        # check that the permissions of the venv base dir are restrictive in case of multi-user systems
        avecho "autove 7. a venv is available to activate"
        if [ "$(stat -c "%a %u" "$pwd_ve")" = "700 $(id -u)" ]; then
            avecho "autove 8. and its permissions match, so activate it"
            # nice, go for it
            source "$pwd_ve"/bin/activate
            AUTOVE_ACTIVATED="$VIRTUAL_ENV"
        elif ! [ "$WARNED_VE" = "$PWD" ]; then
            # complain once per cd into an unsafe directory
            avecho "autove 9. and its permissions match, so don't activate it, and set warned_ve flag"
            WARNED_VE="$PWD"
            echo "bash: AUTOVE: tried to activate $pwd_ve/, but its permissions are $(stat -c "%a" $pwd_ve), owned by user $(stat -c "%u" $pwd_ve). run 'chmod 0700 $pwd_ve', and if needed, 'sudo chown $(id -u) $pwd_ve/'."
        fi
    fi
    autove_label
}
add_prompt_command autove

# explanation after the fact:
# I believe this setting is to allow mouse input inside tmux. If I remember
# correctly, vim is funny about that unless you set TERM=xterm. (I'm not
# completely confident that is the origin of this setting, though.)
case "$TERM" in
    screen*)
        export TERM=xterm
        ;;
esac

# For ssh agent forwarding through tmux. Doesn't work very well :(
#if [ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/agent_sock" ] ; then
#    unlink "$HOME/.ssh/agent_sock" 2>/dev/null
#    ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/agent_sock"
#    export SSH_AUTH_SOCK="$HOME/.ssh/agent_sock"
#fi

if [[ $- == *i* ]]; then

    # I find the multi-column ls output hard to scan for a particular file,
    # so this shuts it off by default.
    alias ls='ls -1'

    # enable color support of ls and also add handy aliases
    # from ubuntu, modified for other OSes, may be redundant
    if [ -x "$(which dircolors)" ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls -1 --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    # from ubuntu, may be redundant
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
    alias manual='command man'
    function man() {
        echo "Please use the 'manual' command:"
        echo
        echo "    manual" $*
        echo
    }

    # the pattern "**" used in a pathname expansion context will
    # match all files and zero or more directories and subdirectories.
    # from ubuntu, not enabled by default
    shopt -s globstar >& /dev/null

    PS1="$(color user)\u$(color at_host)@$(color host)\h$(color at_path):$(color path)\W$(color symbol)\$ $(color)"

    # don't do dangerous moves or copies without asking!!
    alias mv="mv -i"
    alias cp="cp -i"

    # make file give all the results it knows about, not just the first one
    alias file="file -k"

    # enable programmable completion features
    # from ubuntu, may be redundant
    if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
        echo -n "loading completion... "
        . /etc/bash_completion
        echo "done"
    elif [ -f /usr/local/etc/bash_completion ]; then
        echo -n "loading completion... "
        . /usr/local/etc/bash_completion
        echo "done"
    fi

    export PYTHONIOENCODING="utf-8"
    set -o ignoreeof
fi

# ~/.local/bin is where pip puts --user installed commands on mac. I think
# it's the same on linux?
pathprepend "$HOME/.local/bin"
pathprepend "$DOTFILES_DIR/bin"

function bash_shortcuts() {
    MANWIDTH=150 command man -P cat bash | col -b | @ 'l=list(lines);  start,end=[index for index, line in enumerate(l) if "Commands for Moving" in line or line.endswith("Programmable Completion")]; qq=[line.replace("\t", " "*8)[3:] for line in l[start:end]]; sections = [(index, label) for index, label in enumerate(qq) if len(label.strip()) and label[0] != " "] + [(len(qq), u"")]; f="Sections (usage: bash_shortcuts <section search>): \n" + "\n".join("    {}".format(label.strip()) for index, label in sections if label); sec = ([index for index, sect in enumerate(sections[:-1]) if section_search.strip().lower().replace(" ", "") in sect[1].lower().replace(" ", "")] + [0])[0]; start,end = [sections[idx][0] for idx in [sec, sec+1]]; "{}\n\n{}".format("\n".join(qq[start:end]), f)' -v section_search="$*"
    #MANWIDTH=150 command man -P cat bash | col -b | @ 'l=list(lines);  start,end=[index for index, line in enumerate(l) if "Commands for Moving" in line or line.endswith("Programmable Completion")]; "".join(line + "\n" for line in l[start:end]) '
}

function timestamped () {
    @ '"%s - %s" % (terminal.bold(str(datetime.datetime.now())), line)' -plu
}
function countlines() {
    @ '"%s %s" % j[::-1] for j in sorted(collections.Counter(lines).items())' -p
}

function superwatch() {
    while sleep 2; do
        b="$($@ 2>&1 | cut -c1-"$(stty size </dev/tty | cut -d" " -f2)" )"
        clear
        echo "$b" | head -n $(( $(tput lines) - 1))
    done
}
export PIPENV_VENV_IN_PROJECT=1




fi
