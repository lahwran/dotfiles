if ! [ -v BASHRC_GLOBAL_WAS_RUN ] ; then
BASHRC_GLOBAL_WAS_RUN=yes

# !!!!!!!!!!!!!!!!!!!!!!!
#   WARNING: IF BASH FAILS TO LOAD THESE NEXT LINES, IT CAN OBLITERATE YOUR
#   HISTORY.

# I copy my bash history on regular intervals and back it up with
# crashplan. I'll probably make a thing to do
# that automatically eventually, but watch out for failed bash
# startups.
shopt -s histappend
HISTSIZE=10000000000000
HISTFILESIZE=10000000000000
HISTIGNORE=""
HISTCONTROL=""
export HISTTIMEFORMAT="%y-%m-%d %T "

#   END history warning
# .......................

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
# from ubuntu, may be redundant
shopt -s checkwinsize

# End ubuntu defaults

pathappend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="${PATH:+"$PATH:"}$1"
    fi
}

pathprepend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1${PATH:+":$PATH"}"
    fi
}

varappend() {
    if [ -d "$2" ] && [[ ":${!1}:" != *":$2:"* ]]; then
        export $1="${!1:+"${!1}:"}$2"
    fi
}

varprepend() {
    if [ -d "$2" ] && [[ ":$PATH:" != *":$2:"* ]]; then
        export $1="$2${!1:+":${!1}"}"
    fi
}


PROMPT_COMMAND=_promptcommand
function _promptcommand() {
    for command in "${_PROMPT_COMMANDS[@]}"; do
        eval "$command"
    done
}
function add_prompt_command() {
    _PROMPT_COMMANDS=( "${_PROMPT_COMMANDS[@]}" "$1" );
}
pathprepend "$HOME/bin"
pathprepend "$HOME/local/bin"
pathprepend /usr/local/bin

if [ "$NVIM_LISTEN_ADDRESS" != "" ]; then
    export EDITOR="nvim-inner"
    export GIT_EDITOR="nvim-inner"
    function vimcd {
        vimcd_ "$@"
        cd "$@"
    }
fi

# set color prompt
# this function was intended to allow colors to be changed
# based on host, so I could tell computers apart by prompt color.
# I still might do that.
function color {
    # PROMPTCOLOR_user="${PROMTCOLOR_user:-32}"
    # PROMPTCOLOR_at_host="${PROMTCOLOR_at_host:-32}"
    # PROMPTCOLOR_host="${PROMTCOLOR_host:-32}"
    # PROMPTCOLOR_at_path="${PROMTCOLOR_at_path:-32}"
    # PROMPTCOLOR_symbol="${PROMTCOLOR_symbol:-32}"
    if [ "$1" == "user" ]; then
        z="$PROMPTCOLOR_user"
    elif [ "$1" == "at_host" ]; then
        z="$PROMPTCOLOR_at_host"
    elif [ "$1" == "host" ]; then
        z="$PROMPTCOLOR_host"
    elif [ "$1" == "at_path" ]; then
        z="$PROMPTCOLOR_at_path"
    elif [ "$1" == "path" ]; then
        z="$PROMPTCOLOR_path"
    elif [ "$1" == "symbol" ]; then
        z="$PROMPTCOLOR_symbol"
    else
        z=""
    fi
    echo -n '\[\033[m\033['"$z"'m\]'

}
unset c
unset COLORFGBG


# see also http://mywiki.wooledge.org/BashFAQ/088
function flushhistory() {
    history -a;
}
add_prompt_command flushhistory

function updatewindowtitle() {
    echo -ne "\033]0;$PWD - $USER@$HOSTNAME - bash\007"
}
add_prompt_command updatewindowtitle

function display_status() {
    touch ~/.prompt_warning
    w="$(< ~/.prompt_warning)"
    if [ "$w" != "" ]; then
        echo "$w"
    fi
    unset w
}
add_prompt_command display_status

# explanation after the fact:
# I believe this setting is to allow mouse input inside tmux. If I remember
# correctly, vim is funny about that unless you set TERM=xterm. (I'm not
# completely confident that is the origin of this setting, though.)
case "$TERM" in
    screen*)
        export TERM=xterm
        ;;
esac

# For ssh agent forwarding through tmux. Doesn't work very well :(
if [ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/agent_sock" ] ; then
    unlink "$HOME/.ssh/agent_sock" 2>/dev/null
    ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/agent_sock"
    export SSH_AUTH_SOCK="$HOME/.ssh/agent_sock"
fi

if [[ $- == *i* ]]; then

    # I find the multi-column ls output hard to scan for a particular file,
    # so this shuts it off by default.
    alias ls='ls -1'

    # enable color support of ls and also add handy aliases
    # from ubuntu, modified for other OSes, may be redundant
    if [ -x "$(which dircolors)" ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls -1 --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    # from ubuntu, may be redundant
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
    alias manual='command man'
    function man() {
        echo "Please use the 'manual' command:"
        echo
        echo "    manual" $*
        echo
    }

    # the pattern "**" used in a pathname expansion context will
    # match all files and zero or more directories and subdirectories.
    # from ubuntu, not enabled by default
    shopt -s globstar >& /dev/null

    PS1="$(color user)\u$(color at_host)@$(color host)\h$(color at_path):$(color path)\w$(color symbol)\$ $(color)"

    # don't do dangerous moves or copies without asking!!
    alias mv="mv -i"
    alias cp="cp -i"

    # make file give all the results it knows about, not just the first one
    alias file="file -k"

    # enable programmable completion features
    # from ubuntu, may be redundant
    if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
        echo -n "loading completion... "
        . /etc/bash_completion
        echo "done"
    elif [ -f $(brew --prefix)/etc/bash_completion ]; then
        echo -n "loading completion... "
        . $(brew --prefix)/etc/bash_completion
        echo "done"
    fi

    export PYTHONIOENCODING="utf-8"
fi

# ~/.local/bin is where pip puts --user installed commands on mac. I think
# it's the same on linux?
pathprepend "$HOME/.local/bin"
pathprepend "$DOTFILES_DIR/bin"

function timestamped () {
    @ '"%s - %s" % (terminal.bold(str(datetime.datetime.now())), line)' -plu
}
function countlines() {
    @ '"%s %s" % j[::-1] for j in sorted(collections.Counter(lines).items())' -p
}

function superwatch() {
    while sleep 2; do
        b="$($@ 2>&1 | cut -c1-"$(stty size </dev/tty | cut -d" " -f2)" )"
        clear
        echo "$b" | head -n $(( $(tput lines) - 1))
    done
}


fi

