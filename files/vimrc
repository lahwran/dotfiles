" this if block from https://bitbucket.org/byronclark/settings
if has("autocmd")
    " remove any previous autocmd settings
    autocmd!

    autocmd BufWritePost ~/.vimrc so ~/.vimrc
    autocmd BufWritePost ~/.nvimrc so ~/.nvimrc
    autocmd BufWritePost ~/.vimrc_global so ~/.vimrc
    autocmd BufWritePost ~/dotfiles/files/vimrc so ~/.vimrc
    autocmd BufWritePost ~/.gvimrc so ~/.gvimrc

    " text files don't have a proper filetype
    autocmd BufReadPost *.txt setlocal textwidth=78
    if exists("spell")
        autocmd BufReadPost *.txt setlocal spell spelllang=en_us
    endif

    " gpg encrypted files
    if exists("$KEY")
        autocmd BufNewFile,BufReadPre *.gpg :set secure viminfo= noswapfile nobackup nowritebackup history=0 binary
        autocmd BufReadPost *.gpg :%!gpg -d 2>/dev/null
        autocmd BufWritePre *.gpg :%!gpg -e -r $KEY 2>/dev/null
        autocmd BufWritePost *.gpg u
    endif

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

endif

set virtualedit=onemore

" this also from byron's
" jumps between screen lines by default, rather than logical lines
"noremap <silent> <nowait> <D-A-C-S-u> <nop>
noremap <silent> <nowait> j gj
noremap <silent> <nowait> k gk
noremap <silent> <nowait> 0 g0
noremap <silent> <nowait> $ g$
ounmap  j
ounmap  k
ounmap  0
ounmap  $

filetype plugin on
filetype indent on

call pathogen#infect()
call pathogen#helptags()

set guioptions-=m " turn off menu bar
set guioptions-=T " turn off toolbar

" pythony tabs
set autoindent smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set backspace=indent,eol,start " defaults to eol,start iirc

" line numbers
set number

" highlight the current line on the current window with underline
augroup BgHighlight
    autocmd!
augroup END

nnoremap <nowait> <C-W>_\| <C-W>_<C-W>\|
nnoremap <nowait> <C-W>- <C-W>10-
nnoremap <nowait> <C-W>+ <C-W>10+
nnoremap <nowait> <C-W>< <C-W>10<
nnoremap <nowait> <C-W>> <C-W>10>
nmap <nowait> <C-_>\| <C-W>_\|
nmap <nowait> <C--> <C-W>-
nmap <nowait> <C-W>, <C-W><
nmap <nowait> <C-W>. <C-W>>

nnoremap <nowait> <silent> gt<TAB> :tabfirst \| tabN \| tabN \| tabN \| tabN \| tabN<CR>
nnoremap <nowait> <silent> 1gt :tabfirst \| tabN \| tabN \| tabN \| tabN<CR>
nnoremap <nowait> <silent> 2gt :tabfirst \| tabN \| tabN \| tabN<CR>
nnoremap <nowait> <silent> 3gt :tabfirst \| tabN \| tabN<CR>
nnoremap <nowait> <silent> 4gt :tabfirst \| tabN<CR>
nnoremap <nowait> <silent> 5gt :tabfirst <CR>
nnoremap <nowait> <silent> 6gt :tabfirst \| tabn <CR>
nnoremap <nowait> <silent> 7gt :tabfirst \| tabn \| tabn <CR>
nnoremap <nowait> <silent> 8gt :tabfirst \| tabn \| tabn \| tabn <CR>
nnoremap <nowait> <silent> 9gt :tabfirst \| tabn \| tabn \| tabn \| tabn <CR>
nmap <silent> <nowait> gtq 1gt
nmap <silent> <nowait> gtw 2gt
nmap <silent> <nowait> gte 3gt
nmap <silent> <nowait> gtr 4gt
nmap <silent> <nowait> gtt 5gt
nmap <silent> <nowait> gty 6gt
nmap <silent> <nowait> gtu 7gt
nmap <silent> <nowait> gti 8gt
nmap <silent> <nowait> gto 9gt
nnoremap <silent> gt :echom "use gt5 to go to the main tab"<CR>
nmap <silent> gT gt

"nnoremap <silent> gt1

set history=10000 " increase history 'cause I like lots of it

set hlsearch  " highlight searches - I like to see my searches
set ignorecase  " ignore case when searching...
set smartcase  " ...except when a capital letter is in the search
set ruler  " show the cursor position on the bottom of the screen all the time
set laststatus=2  " helps show the file name
set incsearch  " start searching before you hit enter

"fold based on indent
set foldmethod=indent
set foldnestmax=100
set showcmd

highlight Folded ctermbg=none ctermfg=green cterm=none
set foldcolumn=0 " no fold indicator column next to line numbers
set foldtext=MyFoldText() " fancy minimal fold text
function! MyFoldText()
    let line = v:foldstart
    let indent = indent(line)
    let indenttext = repeat(" ", indent) " take indent into account when displaying foldtext
    let text = indenttext . foldtext() 
    return text
endfunction
set fillchars="fold:"
highlight Folded ctermbg=none

if has("syntax")
  syntax enable
endif

set nowrap

" I like being able to scroll with the mouse, since it's so close-by
" on my laptop keyboard anyway
set mouse=a 
nnoremap <silent> <nowait> <F3> :set mouse=a<CR>
nnoremap <silent> <nowait> <F4> :set mouse=<CR>

" f2 to toggle paste mode - disables autoindent
" noremap <F2> :set invpaste paste?<CR>
" set pastetoggle=<F2>
" set showmode

" color the normally confusing paren-highlight to a color that isn't too
" horribly prominent so I can actually tell what's what
highlight MatchParen cterm=NONE ctermbg=black ctermfg=darkblue

highlight StatusLine cterm=bold ctermfg=blue

" this goes with my terminal colors better (I use a simple version of
" solarized - no weird app customization, just terminal colors)
hi Search cterm=NONE ctermfg=grey ctermbg=darkblue
hi Visual cterm=NONE ctermfg=black ctermbg=darkyellow

" fix for vim oddness with multi-character actions
set timeout timeoutlen=1000 ttimeoutlen=100

" keep visual selection highlighted when indenting/deindenting
vnoremap <silent> <nowait> < <gv
vnoremap <silent> <nowait> > >gv

" bash-like tab completion when typing paths in :e and friends
set wildmode=longest:full,full
set wildmenu

" I want unlimited :(
let g:terminal_scrollback_buffer_size=100000

function! SetWeirdEsc()
    nnoremap <silent> <nowait> <D-A-C-S-ESC> <ESC><ESC>:q<CR>
    nnoremap <silent> <nowait> <D-A-C-S-CR> <CR>
endfunction

function! PrepWindowAct()
    nnoremap <silent> <nowait> <D-A-C-S-ESC> <ESC><ESC>:q<CR><C-\><C-n>:q<CR>:call CancelWindowCommandAction()<CR><ESC><ESC>
    nnoremap <silent> <nowait> <D-A-C-S-CR> <CR><C-\><C-n>:call CancelWindowCommandAction()<CR>

    "cnoremap <ESC> <ESC><C-\><C-n>:q<CR>:call CancelWindowCommandAction()<CR><ESC><ESC>
    cnoremap <CR> <CR><C-\><C-n>:call CancelWindowCommandAction()<CR>
endfunction

function! CancelWindowCommandAction()
    "cunmap <ESC>
    cunmap <CR>
    call SetWeirdEsc()
endfunction
call SetWeirdEsc()

function! MakeScratchWindow()
    vnew
    setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile
endfunction

function! ReadCmd(prefix, postfix, window, wclose, content)
    let curline = getline('.')
    call inputsave()
    try
        if empty(a:content)
            call feedkeys(repeat("\<Left>", strlen(a:postfix)), 'n')
            let l:cmd = input("$ ", a:prefix . a:postfix)
            let l:cmd = substitute(l:cmd, '^\s*\(.\{-}\)\s*$', '\1', '')
            if empty(l:cmd)
                if a:window
                    call CancelWindowCommandAction()
                else
                    call feedkeys(':', 'n')
                    call feedkeys("\<ESC>\<ESC>", 'm')
                endif
                if a:wclose
                    q
                endif
            else
                call ReadCmd('', '', 0, 0, l:cmd)
            endif
            return 0
        endif
        let l:cmd = a:prefix . a:content . a:postfix

        let l:output = system('(true;' . l:cmd . ') 2>&1')
        "let l:output = substitute(l:output, '\n', '', '')
        set paste
        execute 'normal! i' . l:output
        set nopaste
    catch
    endtry

    call inputrestore()
    call setline('.', curline)
endfunction
nnoremap <silent> <nowait> ,c :call ReadCmd('','',0,0,'')<CR>
nnoremap <silent> <nowait> ,C :call PrepWindowAct()<CR>:call MakeScratchWindow()<CR>:set wrap<CR><ESC><ESC>:call ReadCmd("", "", 1, 1, '')<CR>

noremap <nowait> [ {
noremap <nowait> { [
noremap <nowait> ] }
noremap <nowait> } ]
augroup fixjumps
    autocmd!
    autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * noremap <buffer> <nowait> [ {
    autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * noremap <buffer> <nowait> { [
    autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * noremap <buffer> <nowait> ] }
    autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * noremap <buffer> <nowait> } ]
augroup END

nnoremap <nowait> <silent> ! :set opfunc=ProgramFilter<cr>g@
vnoremap <nowait> <silent> ! :<c-u>call ProgramFilter(visualmode(), 1)<cr>
function! ProgramFilter(vt, ...)
    let [qr, qt] = [getreg('"'), getregtype('"')]
    let [oai, ocin, osi, oinde] = [&ai, &cin, &si, &inde]
    setl noai nocin nosi inde=

    " in normal mode: let [sm, em] = ['[', ']']
    " in visual mode: let [sm, em] = ['<', '>']
    let [sm, em] = ['[<'[a:0], ']>'[a:0]]
    exe 'silent norm!`' . sm . a:vt . '`' . em . 'x'

    call inputsave()
    let cmd = input('!')
    call inputrestore()

    if empty(cmd)
        exe "silent norm!P"
    else
        let l:vt = getregtype('"')

        let out = system(cmd, @")
        "let out = substitute(out, '$', '', '')
        call setreg('"', out, l:vt)
        exe "silent norm!P"
    endif

    let [&ai, &cin, &si, &inde] = [oai, ocin, osi, oinde]
    call setreg('"', qr, qt)
endfunction

set sessionoptions=buffers,help,blank,winsize,tabpages,cursor

" convenient win-grab functionality
" ,u to hide the current buffer and record what buffer it was in a clipboard
" ,U to copy the current buffer's id without hiding it
" ,h or ,j or ,k or ,l to paste the recorded buffer relative to the current
" window
" note: this doesn't seem to work on scratch windows. I'm not really sure why.
let g:wingrab_last_buffer = -1
function! Wincp()
    let g:wingrab_last_buffer = bufnr("%")
endfunction
nnoremap <silent> <nowait> ,u :call Wincp()<CR>:hide<CR><C-=><ESC><ESC>
nnoremap <silent> <nowait> ,<S-U> :call Wincp()<CR><ESC><ESC>
nnoremap <silent> <nowait> ,h :aboveleft vnew<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap <silent> <nowait> ,l :rightbelow vnew<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap <silent> <nowait> ,k :aboveleft new<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap <silent> <nowait> ,j :rightbelow new<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>

" ,z to open git-tracked version of this file in scratch split
nnoremap <silent> <nowait> ,z :vnew \| setlocal syntax=<C-r>=&syntax<CR> \| r !git show HEAD:<C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>
nnoremap <silent> <nowait> ,Z :vnew \| setlocal syntax=<C-r>=&syntax<CR> \| r !git show HEAD^1:<C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>

" ,pf to run pytest in split on the current test file
" ,pa to run pytest in a split in the current directory
" nnoremap ,pf :vnew \| r !py.test <C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>
" nnoremap ,pa :vnew \| r !py.test<CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>
nnoremap <silent> <nowait> ,p :%!unknown_shift extract /dev/stdin<CR><ESC><ESC>
nnoremap <silent> <nowait> ,P :%!unknown_shift inline /dev/stdin<CR><ESC><ESC>

nnoremap <silent> <nowait> ,b :call PrepWindowAct()<CR>:vnew<CR>:term build.sh<CR><C-\><C-n>:call CancelWindowCommandAction()<CR>
nnoremap <silent> <nowait> ,r :call PrepWindowAct()<CR>:vnew<CR>:term ./launch.sh inner<CR><C-\><C-n>:call CancelWindowCommandAction()<CR>i

" ,n to open nerdtree
nnoremap <silent> <nowait> ,n :NERDTree<CR>
nnoremap ,<CR> :cd ~/SMDesktop<CR>:NERDTree ~/SMDesktop<CR>

nnoremap <silent> <nowait> ,t :call PrepWindowAct()<CR>:vnew<CR>:term<CR><C-\><C-n>:call CancelWindowCommandAction()<CR>i
" nnoremap ,o :call PrepWindowAct()<CR>:call MakeScratchWindow()<CR>:read !~/SMDesktop/overview<CR><ESC><ESC>

" ,g'search here'<CR> to search current git repo and paste results into
" current file
nnoremap ,g :call ReadCmd("ggrep_ ", "", 1, 0, '')<CR>
" ,gg'search here'<CR> to search current git repo and paste results into
" new scratch buffer
nnoremap <nowait> ,gg :call PrepWindowAct()<CR>:call MakeScratchWindow()<CR>:set wrap<CR><ESC><ESC>:call ReadCmd("ggrep_ ", "", 1, 1, '')<CR>
vmap <silent> <nowait> ,gg "gy<ESC><ESC>:call MakeScratchWindow()<CR>:call ReadCmd("ggrep_ '", "'", 1, 0, @@)<CR><ESC><ESC>

nnoremap <silent> <nowait> ,gw :call MakeScratchWindow()<CR><ESC><ESC>

" nnoremap ,ban :vnew<CR>:term ./gradlew --daemon installDebug<SPACE>

if exists(':tnoremap')
    set breakindent
    set breakindentopt=min:30,shift:4
    set shada='10000000,f1,<25000,@10000000,:10000000,/10000000,h,s100000
    "tnoremap <silent> <nowait> <ESC><ESC> <C-\><C-n>G:call search(".", "b")<CR>$
    tnoremap <silent> <nowait> <C-W> <C-\><C-n><C-w>
    nnoremap <c-z> <nop>
    inoremap <c-z> <nop>
    vnoremap <c-z> <nop>
endif

" ,m to join lines
nnoremap <silent> <nowait> ,m :join<CR>
augroup fixgui
    au!
augroup END

function! Slow()
    augroup fixgui
        au!
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * exe "normal! \<c-l>"
    augroup END
endfunction
function! Fast()
    augroup fixgui
        au!
    augroup END
endfunction
command! S call Slow()
command! F call Fast()


" I often typo :q as :Q, but want it to do the same thing; similarly with
" HJKL. this hides some features - I don't use them, but if you do, this may
" be detrimental. also, I often typo :q as q:.
"
"nnoremap q: :
noremap <silent> <nowait> Q q
noremap <silent> <nowait> J j
noremap <silent> <nowait> K k
noremap <silent> <nowait> H h
noremap <silent> <nowait> L l
"noremap <silent> <nowait> <C-j> j
"noremap <silent> <nowait> <C-k> k
"noremap <silent> <nowait> <C-h> h
"noremap <silent> <nowait> <C-l> l

"unmap :
"nnoremap : q:i
"nnoremap / q/i
"nnoremap ? q?i
"
"cnoremap <ESC> <ESC>q:
nnoremap <nowait> q: :
set cedit=<S-Tab>

" --- ctrlp config
" this commented out code doesn't work, but it seems like it should...
"let g:ctrlp_custom_ignore = {
"    \ 'dir': '.*\/(\.git|\.hg|htmlcov|__pycache__)$',
"    \ 'file': '.*(\.so|\.pyc)$',
"    \ 'link': 'THIS_WILL_NEVER_MATCH'
"    \ }
set wildignore+=*.pyc,*.so,.git,.hg,htmlcov,__pycache__,.*.sw*
let g:ctrlp_open_multiple_files='v'
let g:ctrlp_open_new_file='v'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_lazy_update=50
let g:ctrlp_follow_symlinks=1
let g:ctrlp_max_files = 0
let g:ctrlp_max_history = 10000
let g:ctrlp_prompt_mappings = {
            \ 'AcceptSelection("v")': ['<cr>'],
            \ 'AcceptSelection("e")': ['<c-v>'],
            \ 'ToggleMRURelative()': ['<F2>']
            \ }
let g:ctrlp_user_command = '~/dotfiles/bin/ctrlp_find %s'

set titlestring=%{expand(\"%:p:h\")}/%t%(\ %a%)\ -\ %{$USER}@%{hostname()}\ -\ vim

"BEGIN from eevee's dotfiles: https://github.com/eevee/rc/blob/master/.vimrc
if &term =~ "^screen"
    " pretend this is xterm.  it probably is anyway, but if term is left as
    " `screen`, vim doesn't understand ctrl-arrow.
    if &term == "screen-256color"
        set term=xterm-256color
    else
        set term=xterm
    endif

    " gotta set these *last*, since `set term` resets everything
    set t_ts=k
    set t_fs=\
endif
set title

set undodir=~/.vim/undo         " persistent undo storage
set undofile                    " persistent undo on

set showcmd                     " display incomplete commands
set shiftround                  " only indent to multiples of shiftwidth

set fileformats=unix,dos        " unix linebreaks in new files please
set listchars=tab:↹·,extends:⇉,precedes:⇇,nbsp:␠,trail:␠,nbsp:␣
                                " appearance of invisible characters

" set ttymouse=xterm2             " force mouse support for screen
setglobal fileencoding=utf-8    " ...
set nobomb                      " do not write utf-8 BOM!
set fileencodings=ucs-bom,utf-8,iso-8859-1
                                " order to detect Unicodeyness

set scrolloff=2                 " always have 2 lines of context on the screen
"END from eevee's dotfiles: https://github.com/eevee/rc/blob/master/.vimrc


" highlight settings for gitgutter
highlight clear SignColumn 
highlight clear DiffAdd
highlight clear DiffChange
highlight clear DiffDelete
highlight clear DiffText

highlight DiffAdd term=bold ctermfg=black ctermbg=darkgreen
highlight DiffText term=bold ctermfg=black ctermbg=darkgreen
highlight DiffChange term=bold ctermfg=black ctermbg=darkyellow
highlight DiffDelete term=bold ctermbg=red ctermfg=red

highlight GitGutterAdd term=bold ctermbg=darkgreen ctermfg=black
highlight GitGutterChange term=bold ctermbg=darkyellow ctermfg=black
highlight GitGutterDelete term=bold ctermfg=red
highlight GitGutterChangeDelete term=bold ctermbg=darkyellow ctermfg=black


let g:gitgutter_escape_grep = 1
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
let g:gitgutter_diff_args = '--patience'
set updatetime=1000

set colorcolumn=80
highlight ColorColumn ctermbg=0

let java_space_errors = 1

nnoremap ,f 080l

set backupskip=/tmp/*,/private/tmp/*

set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline+=%#warningmsg#
set statusline+=%*

let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.'],
  \   'objc' : ['->', '.'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \   'rust' : ['.', '::', '(', '='],
  \ }
let g:ycm_min_num_of_chars_for_completion = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']


if !isdirectory($HOME."/.vim/backup/")
    call mkdir($HOME."/.vim/backup/", "p")
endif
if !isdirectory($HOME."/.vim/swap/")
    call mkdir($HOME."/.vim/swap/", "p")
endif
if !isdirectory($HOME."/.vim/undo/")
    call mkdir($HOME."/.vim/undo/", "p")
endif
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//


let racer_open_cmd="vnew"


"vnoremap ,y I\|        \|          \|        \| <ESC><ESC>R\| yum do \| yum done \| useful \|<ESC><ESC>
vnoremap <nowait> ,Y 0I\|          \|            \|        \| <ESC><ESC>R\| exciting \| satisfying \| useful \| thing<ESC><ESC>O<CR><ESC>0i exciting: yummy to do<CR><ESC>0i satisfying: yummy to have out of the way<CR><ESC>0i useful: useful to have done<CR><ESC>0i scale: YES!!/yes/ish/no/NO!<CR><ESC><ESC>0jjl
vnoremap <nowait> ,y 0I\|          \|            \|        \| <ESC><ESC>R\| exciting \| satisfying \| useful \| thing<ESC><ESC>0jl

nnoremap <nowait> ; :

augroup AutoSwap
	autocmd!
	autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
	" if swapfile is older than file itself, just get rid of it
	if getftime(v:swapname) < getftime(a:filename)
		call delete(v:swapname)
		let v:swapchoice = 'e'
	endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
  \ if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
	autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * if expand('%') !=# '[Command Line]' | checktime | endif
    endif
augroup END
nnoremap U :GundoToggle<CR>

autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * if expand('%') ==# '[Command Line]' | nmap <silent> <nowait> <buffer> <CR> <D-A-C-S-CR> | nmap <silent> <nowait> <buffer> <ESC> <D-A-C-S-ESC> | endif


autocmd BufNewFile,BufFilePre,BufRead,BufWritePost *.md set filetype=markdown
autocmd BufNewFile,BufFilePre,BufRead,BufWritePost * if &filetype == "" | set ft=markdown | endif
autocmd BufNewFile,BufFilePre,BufRead,BufWritePost *.plans.md set filetype=plansmd
autocmd BufNewFile,BufFilePre,BufRead,BufWritePost *.cuh,*.cu set filetype=cpp syntax=nested_py_cuda_cpp
autocmd BufNewFile,BufFilePre,BufRead,BufWritePost *.h,*.hpp,*.hxx,*.hh set filetype=cpp syntax=nested_py_cpp
autocmd BufNewFile,BufFilePre,BufRead,BufWritePost *.c,*.cpp,*.cxx,*.cc set filetype=cpp syntax=nested_py_cpp
autocmd FileType cpp setlocal nosmarttab shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType c setlocal nosmarttab shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType cuda setlocal nosmarttab shiftwidth=4 tabstop=4 noexpandtab
autocmd BufWritePost * filetype detect

set nolazyredraw                  " don't update screen inside macros, etc

set wrap
set showbreak=...\ 
set linebreak


"function! MapWinCmd()
"    nnoremap ,w qW:call nnoremap ,w
"endfunction
"call MapWinCmd
"
"nnoremap ,W 

nnoremap <C-i> :CtrlPChange<CR>
nnoremap <C-I> :CtrlPChangeAll<CR>
let g:ctrlp_cmd = 'CtrlPMixed'
"nnoremap <nowait> <silent> <C-m> `

set sidescrolloff=8

inoremap <c-z> <esc><esc><c-z>
inoremap <c-w> <esc><esc><c-w>

augroup AutoDiffUpdate 
  au! 
  autocmd InsertLeave * if &diff | diffupdate | let b:old_changedtick = b:changedtick | endif 
  autocmd CursorHold * 
        \ if &diff && 
        \    (!exists('b:old_changedtick') || b:old_changedtick != b:changedtick) | 
        \   let b:old_changedtick = b:changedtick | diffupdate | 
        \ endif 
augroup END 

" for some reason after loading ~/.vimrc with `source ~/.vimrc` inside vim,
" everything gets highlighted. this works around that.
noh
