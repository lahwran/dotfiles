set nocompatible

" this if block from https://bitbucket.org/byronclark/settings
if has("autocmd")
    " remove any previous autocmd settings
    autocmd!

    autocmd BufWritePost ~/.vimrc so ~/.vimrc
    autocmd BufWritePost ~/.nvimrc so ~/.nvimrc
    autocmd BufWritePost ~/.vimrc_global so ~/.vimrc
    autocmd BufWritePost ~/dotfiles/files/vimrc so ~/.vimrc
    autocmd BufWritePost ~/.gvimrc so ~/.gvimrc

    " text files don't have a proper filetype
    autocmd BufReadPost *.txt setlocal textwidth=78
    if exists("spell")
        autocmd BufReadPost *.txt setlocal spell spelllang=en_us
    endif

    " gpg encrypted files
    if exists("$KEY")
        autocmd BufNewFile,BufReadPre *.gpg :set secure viminfo= noswapfile nobackup nowritebackup history=0 binary
        autocmd BufReadPost *.gpg :%!gpg -d 2>/dev/null
        autocmd BufWritePre *.gpg :%!gpg -e -r $KEY 2>/dev/null
        autocmd BufWritePost *.gpg u
    endif

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

endif

" this also from byron's
" jumps between screen lines by default, rather than logical lines
map     j gj
ounmap  j
map     k gk
ounmap  k

filetype plugin on
filetype indent on

call pathogen#infect()
call pathogen#helptags()

set guioptions-=m " turn off menu bar
set guioptions-=T " turn off toolbar

" pythony tabs
set autoindent smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set backspace=indent,eol,start " defaults to eol,start iirc

" line numbers
set number

" highlight the current line on the current window with underline
autocmd VimEnter * set cul
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cul
    autocmd WinLeave * set nocul
augroup END

set history=10000 " increase history 'cause I like lots of it

set hlsearch  " highlight searches - I like to see my searches
set ignorecase  " ignore case when searching...
set smartcase  " ...except when a capital letter is in the search
set ruler  " show the cursor position on the bottom of the screen all the time
set laststatus=2  " helps show the file name
set incsearch  " start searching before you hit enter

"fold based on indent
set foldmethod=indent
set foldnestmax=100

highlight Folded ctermbg=none ctermfg=green cterm=none
set foldcolumn=0 " no fold indicator column next to line numbers
set foldtext=MyFoldText() " fancy minimal fold text
function! MyFoldText()
    let line = v:foldstart
    let indent = indent(line)
    let indenttext = repeat(" ", indent) " take indent into account when displaying foldtext
    let text = indenttext . foldtext() 
    return text
endfunction
set fillchars="fold:"
highlight Folded ctermbg=none

if has("syntax")
  syntax enable
endif

set nowrap

" I like being able to scroll with the mouse, since it's so close-by
" on my laptop keyboard anyway
set mouse=a 
nnoremap <F3> :set mouse=a<CR>
nnoremap <F4> :set mouse=<CR>

" f2 to toggle paste mode - disables autoindent
noremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" color the normally confusing paren-highlight to a color that isn't too
" horribly prominent so I can actually tell what's what
highlight MatchParen cterm=NONE ctermbg=black ctermfg=darkblue

highlight StatusLine ctermfg=blue

" this goes with my terminal colors better (I use a simple version of
" solarized - no weird app customization, just terminal colors)
hi Search cterm=NONE ctermfg=grey ctermbg=darkblue
hi Visual cterm=NONE ctermfg=black ctermbg=darkyellow

" fix for vim oddness with multi-character actions
set timeout timeoutlen=1000 ttimeoutlen=100

" keep visual selection highlighted when indenting/deindenting
vnoremap < <gv
vnoremap > >gv

" bash-like tab completion when typing paths in :e and friends
set wildmode=longest:full,full
set wildmenu

" I want unlimited :(
let g:terminal_scrollback_buffer_size=100000


function! PrepWindowAct()
    cnoremap <ESC> <C-\><C-n>:q<CR>:call CancelWindowCommandAction()<CR><ESC><ESC>
    cnoremap <CR> <CR><C-\><C-n>:call CancelWindowCommandAction()<CR>
endfunction

function! CancelWindowCommandAction()
    cunmap <ESC>
    cunmap <CR>
endfunction

function! MakeScratchWindow()
    vnew
    setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile
endfunction

set sessionoptions=buffers,help,blank,winsize,tabpages,cursor

" convenient win-grab functionality
" ,u to hide the current buffer and record what buffer it was in a clipboard
" ,U to copy the current buffer's id without hiding it
" ,h or ,j or ,k or ,l to paste the recorded buffer relative to the current
" window
" note: this doesn't seem to work on scratch windows. I'm not really sure why.
let g:wingrab_last_buffer = -1
function! Wincp()
    let g:wingrab_last_buffer = bufnr("%")
endfunction
nnoremap ,u :call Wincp()<CR>:hide<CR><C-=><ESC><ESC>
nnoremap ,<S-U> :call Wincp()<CR><ESC><ESC>
nnoremap ,h :aboveleft vnew<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap ,l :rightbelow vnew<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap ,k :aboveleft new<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>
nnoremap ,j :rightbelow new<CR>:execute "buffer! " . g:wingrab_last_buffer<CR><C-=><ESC><ESC>

" ,z to open git-tracked version of this file in scratch split
nnoremap ,z :vnew \| setlocal syntax=<C-r>=&syntax<CR> \| r !git show HEAD:<C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>
nnoremap ,Z :vnew \| setlocal syntax=<C-r>=&syntax<CR> \| r !git show HEAD^1:<C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>

" ,pf to run pytest in split on the current test file
" ,pa to run pytest in a split in the current directory
nnoremap ,pf :vnew \| r !py.test <C-r>=bufname("%")<CR><CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>
nnoremap ,pa :vnew \| r !py.test<CR><ESC>:setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodifiable<CR><ESC><ESC>

" ,r to reload current file, hopefully resetting vim's buffer settings
nnoremap ,r :e __nonexistantfile__ \| e <C-r>=bufname("%")<CR><CR>

" ,n to open nerdtree
nnoremap ,n :NERDTree<CR>

nnoremap ,t :call PrepWindowAct()<CR>:vnew<CR>:term<SPACE>

" ,g'search here'<CR> to search current git repo and paste results into
" current file
nnoremap ,g' :read !ggrep --args '
" ,gg'search here'<CR> to search current git repo and paste results into
" new scratch buffer
nnoremap ,gg' :call PrepWindowAct()<CR>:call MakeScratchWindow()<CR>:set wrap<CR><ESC><ESC>:read !ggrep --args '
nnoremap ,gw :call MakeScratchWindow()<CR><ESC><ESC>

nnoremap ,ban :vnew<CR>:term ./gradlew --daemon installDebug<SPACE>

tnoremap <ESC><ESC> <C-\><C-n>G:call search(".", "b")<CR>$

" ,m to join lines
nnoremap ,m :join<CR>

" I often typo :q as :Q, but want it to do the same thing; similarly with
" HJKL. this hides some features - I don't use them, but if you do, this may
" be detrimental. also, I often typo :q as q:.
nnoremap q: :
noremap Q q
noremap J j
noremap K k
noremap H h
noremap L l


" --- ctrlp config
" this commented out code doesn't work, but it seems like it should...
"let g:ctrlp_custom_ignore = {
"    \ 'dir': '.*\/(\.git|\.hg|htmlcov|__pycache__)$',
"    \ 'file': '.*(\.so|\.pyc)$',
"    \ 'link': 'THIS_WILL_NEVER_MATCH'
"    \ }
set wildignore+=*.pyc,*.so,.git,.hg,htmlcov,__pycache__,.*.sw*
let g:ctrlp_open_multiple_files='v'
let g:ctrlp_open_new_file='v'
let g:ctrlp_lazy_update=50
let g:ctrlp_follow_symlinks=1
let g:ctrlp_max_files = 0
let g:ctrlp_prompt_mappings = {
            \ 'AcceptSelection("v")': ['<cr>'],
            \ 'AcceptSelection("e")': ['<c-v>']
            \ }
let g:ctrlp_user_command = 'ctrlp_find %s'

set titlestring=%{expand(\"%:p:h\")}/%t%(\ %M%)%(\ %a%)\ -\ %{$USER}@%{hostname()}\ -\ vim

"BEGIN from eevee's dotfiles: https://github.com/eevee/rc/blob/master/.vimrc
if &term =~ "^screen"
    " pretend this is xterm.  it probably is anyway, but if term is left as
    " `screen`, vim doesn't understand ctrl-arrow.
    if &term == "screen-256color"
        set term=xterm-256color
    else
        set term=xterm
    endif

    " gotta set these *last*, since `set term` resets everything
    set t_ts=k
    set t_fs=\
endif
set title

set undodir=~/.vim/undo         " persistent undo storage
set undofile                    " persistent undo on

set lazyredraw                  " don't update screen inside macros, etc
set showcmd                     " display incomplete commands
set shiftround                  " only indent to multiples of shiftwidth

set fileformats=unix,dos        " unix linebreaks in new files please
set listchars=tab:↹·,extends:⇉,precedes:⇇,nbsp:␠,trail:␠,nbsp:␣
                                " appearance of invisible characters

set ttymouse=xterm2             " force mouse support for screen
set encoding=utf-8              " best default encoding
setglobal fileencoding=utf-8    " ...
set nobomb                      " do not write utf-8 BOM!
set fileencodings=ucs-bom,utf-8,iso-8859-1
                                " order to detect Unicodeyness

set scrolloff=2                 " always have 2 lines of context on the screen
"END from eevee's dotfiles: https://github.com/eevee/rc/blob/master/.vimrc


" highlight settings for gitgutter
highlight clear SignColumn 
highlight clear DiffAdd
highlight clear DiffChange
highlight clear DiffDelete
highlight clear DiffText

highlight DiffAdd term=bold ctermfg=black ctermbg=darkgreen
highlight DiffText term=bold ctermfg=black ctermbg=darkgreen
highlight DiffChange term=bold ctermfg=black ctermbg=darkyellow
highlight DiffDelete term=bold ctermbg=red ctermfg=red

highlight GitGutterAdd term=bold ctermbg=darkgreen ctermfg=black
highlight GitGutterChange term=bold ctermbg=darkyellow ctermfg=black
highlight GitGutterDelete term=bold ctermfg=red
highlight GitGutterChangeDelete term=bold ctermbg=darkyellow ctermfg=black


let g:gitgutter_escape_grep = 1
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1
let g:gitgutter_diff_args = '--patience'
set updatetime=1000

set colorcolumn=80
highlight ColorColumn ctermbg=0

let java_space_errors = 1

nnoremap ,f 080l

set backupskip=/tmp/*,/private/tmp/*

" for some reason after loading ~/.vimrc with `source ~/.vimrc` inside vim,
" everything gets highlighted. this works around that.
noh
